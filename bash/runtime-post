#!/usr/bin/env bash
# vim: fdl=0

# Is installed # {{{
${RCSTUFF_RUNTIME_POST_INSTALLED:-false} && [[ $1 != '--force' ]] && return 0
export RCSTUFF_RUNTIME_POST_INSTALLED=true
[[ $1 == '--force' ]] && shift
# }}}
# Runtime file # {{{
RUNTIME_POST_FILE=$RUNTIME_PATH/runtime-post.bash
[[ -e $RUNTIME_POST_FILE ]] && source $RUNTIME_POST_FILE
for profi in $BASH_PROFILES; do
  [[ -e $RUNTIME_POST_FILE.$profi ]] && source $RUNTIME_POST_FILE.$profi
done
unset RUNTIME_POST_FILE
# }}}
# TMUX_STATUS_RIGHT_EXTRA # {{{
TMUX_STATUS_RIGHT_EXTRA_SORTED=
while read l; do
  l=$(echo ${l#*:})
  [[ -z $l ]] && continue
  export TMUX_STATUS_RIGHT_EXTRA_SORTED+="$l "
done < <(echo -e "$TMUX_STATUS_RIGHT_EXTRA" | tr ' ' '\n' | command grep -v '^#' | sort -ut ':' -k2,2 | sort -nt ':' -k1,1)
unset l TMUX_STATUS_RIGHT_EXTRA
# }}}
# Source profiles' runtimes # {{{
for profi in $BASH_PROFILES_FULL; do
  [[ -e $profi/runtime-post ]] && source $profi/runtime-post
done # }}}
# Remote changes # {{{
src_dir="$SHARED_BASH_PATH/to-apply"
if ${REMOTE_CHANGES_APPLY:-false} && [[ ! -z $SHARED_BASH_PATH && $UID != 0 ]]; then
  now="${EPOCHSECONDS:-$(epochSeconds)}" rmt_chngs_file="$MEM_KEEP/remote.changes"
  if [[ -z $REMOTE_CHANGES_LAST || $(($REMOTE_CHANGES_LAST + 12*60*60)) -lt $now ]]; then # {{{
    REMOTE_CHANGES_LAST=0
    [[ -e "$rmt_chngs_file" ]] && source "$rmt_chngs_file"
  fi # }}}
  if [[ $(($REMOTE_CHANGES_LAST + 12*60*60)) -lt $now && -d $src_dir ]]; then
    export REMOTE_CHANGES_LAST="$now"
    echo "export REMOTE_CHANGES_LAST=\"$REMOTE_CHANGES_LAST\"" > $rmt_chngs_file
    i= sum= h_sum= file= p= found=
    for i in $src_dir/*; do # {{{
      file="${i##*/}"
      # To apply or not to apply # {{{
      [[ -d $i ]] && continue
      [[ $i != *.sh && $i != *.enc ]] && continue
      [[ $i == *.sh && ! -x $i ]] && continue
      [[ $i == *.sh ]] && ! ${REMOTE_CHANGES_ALLOW_PLAIN:-true} && continue
      [[ $i == *.enc && -z $REMOTE_CHANGES_PWD && -z $REMOTE_CHANGES_KEY ]] && continue
      if [[ $file != all* ]]; then # {{{
        found=false
        for p in $BASH_PROFILES; do
          [[ $file == ${p}* ]] && found=true && break
        done
        ! $found && continue
      fi # }}} # }}}
      sum="$(shasum $i | cut -d\  -f1)"
      h_sum="$(echo -n ${HOSTNAME%%.*} | shasum | cut -d\  -f1)"
      [[ -e "$src_dir/.applied" ]] && command grep -q "^$h_sum $sum" "$src_dir/.applied" && continue
      echo "Applying remote changes [$file]..." >/dev/stderr
      if [[ $file == *.enc ]]; then # {{{
        j="$TMP_MEM_PATH/${file%.enc}"
        if [[ ! -z $REMOTE_CHANGES_KEY ]]; then
          p="--key '$REMOTE_CHANGES_KEY'"
        elif [[ ! -z $REMOTE_CHANGES_PWD ]]; then
          p="--pass '$($PROFILES_PATH/home/bin/oth/runtime-pwd.sh -q "$REMOTE_CHANGES_PWD")'"
        else
          echo "Missing passphrase for [$file]"
          continue
        fi
        if ! eval encryptor $p "$i" "$j"; then
          echo "Cannot decrypt [$file]"
          continue
        fi
        command chmod +x "$j"
        i="$j"
        unset j
      fi # }}}
      $i && echo "$h_sum $sum $file $(command date +'%Y%m%d')" >>"$src_dir/.applied"
      [[ $file == *.enc ]] && rm -f "$i"
    done # }}}
    unset i sum h_sum file p found
  fi
  unset now rmt_chngs_file
fi
unset REMOTE_CHANGES_APPLY REMOTE_CHANGES_ALLOW_PLAIN REMOTE_CHANGES_PWD REMOTE_CHANGES_KEY src_dir
# }}}
# Check personalities # {{{
[[ -z $PERS_USERS ]] && echo "Personalities not found!!!" >/dev/stderr && sleep 2
# }}}
# Unicode extra chars # {{{
if [[ ! -z "$UNICODE_EXTRA_CHARS_FILE" && ! -e "$UNICODE_EXTRA_CHARS_FILE" ]]; then
  touch "$UNICODE_EXTRA_CHARS_FILE"
  {
    echo "declare -A UNICODE_EXTRA_CHARS"
    for i in $(echo ${!UNICODE_EXTRA_CHARS[*]} | tr ' ' '\n' | sort); do
      echo "UNICODE_EXTRA_CHARS[$i]=\"${UNICODE_EXTRA_CHARS[$i]}\""
    done
    echo
  } >"$UNICODE_EXTRA_CHARS_FILE"
  unset i
fi # }}}
# fzf override # {{{
__fzf_select__() { # {{{
  local walker="file,dir,follow,hidden" dirMode=false
  FZF_DEFAULT_COMMAND=${FZF_CTRL_T_COMMAND:-}
  local opts="${FZF_CTRL_T_OPTS-}"
  while [[ ! -z $1 ]]; do # {{{
    case $1 in
    --cmd) # {{{
      FZF_DEFAULT_COMMAND="$2"; shift;; # }}}
    --dir) # {{{
      dirMode=true
      walker="dir,follow,hidden"
      FZF_DEFAULT_COMMAND=${FZF_ALT_C_COMMAND:-}
      opts="${FZF_ALT_C_OPTS-}";; # }}}
    *) break;;
    esac; shift
  done # }}}
  FZF_DEFAULT_OPTS=$(__fzf_defaults "--reverse --walker=$walker --scheme=path" "$opts -m")
  (
    FZF_DEFAULT_COMMAND="$FZF_DEFAULT_COMMAND | sed 's|^\./||'"
    p="$PWD"; origPath="$PWD"
    while true; do
      command cd "$p"
      prompt="> "
      [[ $PWD != $origPath ]] && prompt="${PWD/$HOME/\~}> "
      key_upper="ctrl-u" key_home="ctrl-h" key_into="ctrl-e" key_orig="ctrl-o"
      list="$(FZF_DEFAULT_OPTS_FILE='' $(__fzfcmd) "$@" --prompt "$prompt" --expect $key_upper --expect $key_home --expect $key_into --expect $key_orig)"
      case $(echo "$list" | sed -n '1p') in
      $key_upper) p="$(cd ..; pwd)"; continue;;
      $key_home)  p="$HOME"; continue;;
      $key_orig)  p="$origPath"; continue;;
      $key_into)  # {{{
        p="$(echo "$list" | sed -n '2p')"
        $dirMode || p="$(dirname "$p")"
        p="$PWD/$p"
        continue;; # }}}
      esac
      echo "$list" | sed '1d' |
      while read -r item; do # {{{
        printf '%q\n' "$PWD/$item"  # escape special chars
      done # }}}
      break
    done
  ) | sed -e 's|'"$PWD/"'||' | tr '\n' ' '
} # }}}
fzf-dir-widget() { # {{{
  local selected="$(__fzf_select__ --dir "$@")"
  READLINE_LINE="${READLINE_LINE:0:$READLINE_POINT}$selected${READLINE_LINE:$READLINE_POINT}"
  READLINE_POINT=$(( READLINE_POINT + ${#selected} ))
} # }}}
export -f __fzf_select__ fzf-dir-widget __fzfcmd __fzf_defaults
if $FZF_INSTALLED; then # {{{
  bind -x '"\C-t": "fzf-dir-widget"'
fi # }}}
# }}}
if $IS_MAC; then # {{{
  [[ -z $PS1_CURSOR_COLOR ]] && PS1_CURSOR_COLOR=false
fi # }}}
if ${TMUX_POPUP:-false}; then # {{{
  if ! $TMUX_POPUP_SILENT; then
    echorm --name popup
    echorv -nl -e s d
    echorm --name -
  fi
  export BASH_PHISTORY_FILE=
  export TMUX_SESSION=POPUP
  if [[ ! -z $d ]]; then
    set-utils -h "$d" +basic +hist +remember-conf-dir=.remb +note-file=notes.txt
  fi
fi # }}}
if $IS_DOCKER; then # {{{
  if ! $IS_VSCODE && [[ ! -n $TMUX && ! -z $PS1 && $UID != 0 ]]; then # {{{
    $ALIASES_SCRIPTS/docker-tools/clipboard-docker.sh &
    disown $!
  fi # }}}
fi # }}}
if $IS_VSCODE; then # {{{
  set-utils -h "$APPS_CFG_PATH/vscode" +basic +hist +remember-conf-dir=.remb +note-file=notes.txt
fi # }}}
unset -f set-utils

