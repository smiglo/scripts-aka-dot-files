#!/usr/bin/env bash
# vim: fdl=0

get-value-with-prob() { # @@ # {{{
  if [[ $1 == '@@' ]]; then # {{{
    [[ $2 == 1 ]] && echo "Values Value-i:Prob-i[%]" || echo "Probability-For-Each-Value[%] Value-j:Prob-j[%] Value-k"
    return 0
  fi # }}}
  local r=$((RANDOM%100)) dbg=$(echorm --module get-value-with-prob -f?var-) i= s=0 ii=0 v= end=false values= probs=
  if [[ $1 == *:* ]]; then
    for i in $@; do
      values+="${i%%:*} "
      [[ $i == *:* ]] && probs+="${i#*:} " || break
    done
  else
    values=$1; shift
    probs=$@
  fi
  values=($values)
  len=${#values[*]}
  $dbg && echorv -M r values len probs
  for i in $probs; do # {{{
    i=${i%\%}
    s=$((s+i))
    $dbg && echorv s i ii
    [[ $r -lt $s ]] && v=${values[$ii]} && break
    [[ $ii == $((len-1)) ]] && end=true && break
    ii=$((ii+1))
  done # }}}
  $dbg && echorv -M v ii end
  if [[ -z $v ]]; then # {{{
    $end && v=0 || v=${values[$((len-1))]}
  fi # }}}
  echo $v
} # }}}
get-range-value() { # @@ # {{{
  if [[ $1 == '@@' ]]; then
    echo "-i min max"
    return 0
  fi
  local min=0 max= inclusive=false
  [[ $1 == -i ]] && inclusive=true && shift
  if [[ $# == 1 ]]; then
    max=$1
  elif [[ $# == 2 ]]; then
    min=$1 max=$2
  fi
  [[ -z $max ]] && echo $RANDOM && return 0
  [[ $min != 0 ]] && max=$((max-min))
  [[ $max == 0 ]] && max=2
  $inclusive && max=$((max+1))
  echo $((min+RANDOM%max))
} # }}}
export -f get-value-with-prob get-range-value

