#!/usr/bin/env bash
# vim: fdl=0

time2s() { # @@ # {{{
  $ALIASES_SCRIPTS/time-tools/time2s.sh "$@"
}
alias t2s='time2s' # @@
export PHISTORY_IGNORED_COMMANDS+=":time2s:t2s" # }}}
time-measure() { # @@ # {{{
  local tNow="$(command date +"%s%N")"
  if [[ $1 == '@@' ]]; then # {{{
    case ${4:-$3} in
    --test) echo "-v 50 100 200";;
    --out)  echo "/dev/stderr /dev/stdout";;
    -v | --var \
      | -r | --reset | --end \
      | --add-unit | --round=* | -s \
      | --msg) echo "---";;
    -u) echo "s ms us ns";;
    *)
      echo "--test --get-time -v --var -r --reset --end --add-unit --round=0 --round=1 --round=3 --round=6 --round= --msg --on-init"
      echo "-s -u -p --plain --no-plain --out -0 --from-0 -0-abs --from-0-abs $(command date +%s%N) -?";;
    esac
    return 0
  fi # }}}
  local t0= tLast= unit=s round= addUnit=false msg= onInit=false silent=${TIME_MEASURE_SILENT} d= plain= out='/dev/stderr' from0Abs=false from0=false
  local LC_NUMERIC=
  local tLastVariable=${TIME_MEASURE_VARIABLE:-time-measure-var}
  if [[ $1 == '--test' ]]; then # {{{
    shift
    $ALIASES_SCRIPTS/time-tools/time-measure-test.sh "$@"
    return 0
  fi # }}}
  while [[ ! -z $1 ]]; do # {{{
    case $1 in
    -v | --var) # {{{
      export TIME_MEASURE_VARIABLE="$2"
      tLastVariable=$TIME_MEASURE_VARIABLE
      shift;; # }}}
    -r | --reset) # {{{
      tName="$TIME_MEASURE_PREFIX${tLastVariable//-/_}"
      local -n ns_last=${tName}_ns_last ns_0=${tName}_ns_0 diff_s_last=${tName}_diff_s_last diff_s_0=${tName}_diff_s_0 accu_0=${tName}_accu_0
      ns_last= ns_0= diff_s_last= diff_s_0= accu_0=;; # }}}
    --end) # {{{
      tName="$TIME_MEASURE_PREFIX${tLastVariable//-/_}"
      unset TIME_MEASURE_VARIABLE ${tName}_ns_last ${tName}_ns_0 ${tName}_diff_s_last ${tName}_diff_s_0 ${tName}_accu_0
      return 0;; # }}}
    -\?) # {{{
      tName="$TIME_MEASURE_PREFIX${tLastVariable//-/_}"
      echo "TIME_MEASURE_VARIABLE=$TIME_MEASURE_VARIABLE" >/dev/stderr
      vGet --all $tName >/dev/stderr
      return 0;; # }}}
    --add-unit)   addUnit=true;;
    --round=*)    round=${1#--round=};;
    --msg)        msg="$2"; silent=false; shift;;
    --on-init)    onInit=true;;
    --out)        out=$2; shift;;
    -p | --plain) plain=true;;
    --no-plain)   plain=false;;
    -s)           silent=true;;
    -u)           unit="$2"; shift;;
    --get-time)   echo "$tNow"; return 0;;
    -0-abs | --from-0-abs) from0Abs=true;; # does not change counters
    -0     | --from-0)     from0=true;;    # does not change counters
    [0-9]*)       tLast="$1"; t0="$1";;
    esac; shift
  done # }}}
  tName="$TIME_MEASURE_PREFIX${tLastVariable//-/_}"
  local -n ns_last=${tName}_ns_last ns_0=${tName}_ns_0 diff_s_last=${tName}_diff_s_last diff_s_0=${tName}_diff_s_0 accu_0=${tName}_accu_0
  [[ -z $tLast ]] && tLast=$ns_last
  t0=$ns_0
  if [[ -z $tLast ]]; then # First run: just collect time # {{{
    [[ "$msg" == 'init' ]] && onInit=true
    if [[ ! -z $msg ]] && $onInit; then
      if [[ ( $out == '/dev/stdout' && ! -t 1 ) || ( $out == '/dev/stderr' && ! -t 2 ) ]]; then
        [[ -z $plain ]] && plain=true
      fi
      ! $addUnit && unit=
      if ! ${plain:-false}; then
        printf "%s: %0.03f%s\n" "${msg:-$tLastVariable}" "0" "$unit" >$out
      else
        printf "%0.03f%s\n" "0" "$unit">$out
      fi
    fi
    ns_last="$(command date +"%s%N")"
    ns_0=$ns_last
    accu_0=0
    return 0
  fi # }}}
  local tDiffLast=$(calc -qp -- "($tNow - $tLast - (${TIME_MEASURE_OVERHEAD:-0}))")
  local tDiff0=$(   calc -qp -- "($tNow - $t0    - (${TIME_MEASURE_OVERHEAD:-0}))")
  [[ $tDiffLast == -* ]] && tDiffLast=$(calc -qp -- "($tNow - $tLast)")
  [[ $tDiff0    == -* ]] && tDiff0=$(   calc -qp -- "($tNow - $t0)")
  if ! ${silent:-false}; then # {{{
    local tDiff=$tDiffLast
    $from0Abs && tDiff=$tDiff0
    $from0    && tDiff=$accu_0
    case $unit in # {{{
    s)   d=9; unit=s;  [[ -z $round ]] && round=3;;
    ms)  d=6; unit=ms; [[ -z $round ]] && round=0;;
    us)  d=3; unit=us; [[ -z $round ]] && round=0;;
    ns)  d=0; unit=ns; [[ -z $round ]] && round=0;;
    *)   d=0; unit=ns; [[ -z $round ]] && round=0;;
    esac # }}}
    tDiff=$(calc -qp -- "($tDiff/(10^$d))")
    ! $addUnit && unit=
    LC_NUMERIC=en_US.UTF-8
    if [[ ( $out == '/dev/stdout' && ! -t 1 ) || ( $out == '/dev/stderr' && ! -t 2 ) ]]; then
      [[ -z $plain ]] && plain=true
    fi
    if ! ${plain:-false}; then
      printf "%s: %0.0${round}f%s\n" "${msg:-$tLastVariable}" "$tDiff" "$unit" >$out
    else
      printf "%0.0${round}f%s\n" "$tDiff" "$unit">$out
    fi
  fi # }}}
  if $from0 || $from0Abs; then return 0; fi
  diff_s_last=$(calc -qp -- "($tDiffLast / 1000000000)")
  diff_s_0=$(   calc -qp -- "($tDiff0    / 1000000000)")
  accu_0=$(     calc -qp -- "($accu_0    + $tDiffLast)")
  ns_last="$(command date +"%s%N")"
  return 0
} # }}}
sleep-precise() { # @@ # {{{
  local var="SLEEP_PRECISE_$$" keep=false save=false printTime=false
  if [[ $1 == '@@' ]]; then # {{{
    echo "-v --var -k --keep -r --reset -s --save -i --info --test"
    return 0
  fi # }}}
  while [[ ! -z $1 ]]; do # {{{
    case $1 in
    -v | --var)   var+="_$2"; shift;;
    -k | --keep)  keep=true;;
    -r | --reset) keep=false;;
    -s | --save)  save=true;;
    -i | --info)  printTime=true;;
    --test)
      shift
      (
        local t1= t2= tSum=0 cnt=10 diff=
        case $1 in
        '') export SLEEP_PRECISE_MARGIN=0;;
        -);;
        *) export SLEEP_PRECISE_MARGIN=${1:-0};;
        esac
        echor "Evaluation (SLEEP_PRECISE_MARGIN=$SLEEP_PRECISE_MARGIN)"
        for i in $(seq 1 $cnt); do
          t1=${EPOCHREALTIME//[.,]}
          sleep-precise -s
          sleep 0.5
          sleep-precise 1
          t2=${EPOCHREALTIME//[.,]}
          diff=$(( (t2 - t1) - 1000000 ))
          tSum=$((tSum + diff))
          echor "[$i] $diff"
        done
        local margin=$((tSum / cnt))
        echor "export SLEEP_PRECISE_MARGIN=$margin"
        [[ -z $1 ]] || return 0
        export SLEEP_PRECISE_MARGIN=$margin
        tSum=0
        echor "Verification (SLEEP_PRECISE_MARGIN=$SLEEP_PRECISE_MARGIN)"
        for i in $(seq 1 $cnt); do
          t1=${EPOCHREALTIME//[.,]}
          sleep-precise -s
          sleep 0.5
          sleep-precise 1
          t2=${EPOCHREALTIME//[.,]}
          diff=$(( (t2 - t1) - 1000000 ))
          tSum=$((tSum + (1000000 - (t2 - t1))))
          echor "[$i] $diff"
        done
        echor "diff=$((tSum / cnt))"
      )
      return 0;;
    *) break;;
    esac; shift
  done # }}}
  local rt=${EPOCHREALTIME/[,.]}
  [[ -z $rt ]] && rt=$(( $(command date +%s%N) / 1000 ))
  local -n v=$var
  if [[ -z $v || $v == 0 ]] || $save; then # {{{
    v=$rt
    return 0
  fi # }}}
  local sTime=${1:-1.0} m=${SLEEP_PRECISE_MARGIN:-3000} s2us=1000000
  [[ $sTime == *.* ]] || sTime="$sTime.0"
  sTime=$(( ${sTime%.*} * s2us + ${sTime#*.} * s2us / 10 ))
  sTime=$(( sTime - ($rt - v) - m ))
  if [[ $sTime -gt 0 ]]; then # {{{
    local skip=false
    while [[ ${#sTime} -lt 6 ]]; do sTime="0$sTime"; skip=true; done
    if $skip; then
      sTime="0.$sTime"
    elif [[ $sTime =~ ^(.*)([0-9]{6})$ ]]; then
      sTime="${BASH_REMATCH[1]:-0}.${BASH_REMATCH[2]}"
    fi
    if $printTime; then
      echo $sTime
    else
      sleep $sTime
    fi
  elif $printTime; then
    echo 0
  fi # }}}
  if $keep; then
    eval export $var=$((rt + 10#${sTime/[,.]} + m))
  else
    eval export $var=0
  fi
} # }}}
export -f time2s time-measure sleep-precise

