#!/usr/bin/env bash
# vim: fdl=0

__echor_util() { # {{{
  declare -A colorsMap=([msg]="$CCyan" [module]="$CIBlack" [pre]="$CGreen" [var]="$CYellow" [off]="$COff" )
  case $1 in
  --get-color) # {{{
    [[ $COLORS_ON == false ]] && return
    case $2 in
    msg)    echo "${colorsMap[msg]}";;
    module) echo "${colorsMap[module]}";;
    var)    echo "${colorsMap[var]}";;
    off)    echo "$COff";;
    esac;; # }}}
  --get-header) # {{{
    local colorsOn=${colorsOn:-${COLORS_ON:-true}}
    local module= msg= lvl= lvlMax=1 prefix=${ECHOR_PREFIX}
    while [[ ! -z $1 ]]; do
      case $1 in
      -c:*)    colorsOn=${1#-c:};;
      -m:*)    module=${1#-m:};;
      -pre:*)  prefix=${1#--pre:};;
      -l:*)    lvl=${1#-l:}; if [[ -z $lvl || $lvl == / ]]; then lvl=1; elif [[ $lvl == */* ]]; then lvlMax=${lvl#*/} && lvl=${lvl%%/*}; fi;;
      --msg:*) msg=${1#--msg:};;
      esac; shift
    done
    $colorsOn || { unset colorsMap; declare -A colorsMap; }
    [[ ! -z $msg ]] && msg="${msg% } "
    local txt="ECHOR_NAME_$$"
    if [[ -z ${!txt} ]]; then
      if   [[ -z $module      ]]; then module="$(__echor_util --get-name)"
      elif [[ $module == '-'  ]]; then module=
      elif [[ $module == '-'* ]]; then
        local m=$(__echor_util --get-name)
        [[ $module == -$m ]] && module= || module=$m
      fi
    else
      module=${!txt}
    fi
    if [[ ! -z $module && ! -z $lvl ]]; then
      [[ ( ! -z $lvlMax && $lvlMax != 1 ) || $lvl -gt 1 ]] && module+="-${lvl#-}"
    fi
    local out=
    [[ ! -z $msg    ]] && out+="${colorsMap[msg]}$msg${colorsMap[off]}"
    [[ ! -z $module ]] && out+="${colorsMap[module]}$module${colorsMap[off]}: "
    [[ ! -z $prefix ]] && out+="${colorsMap[pre]}$prefix${colorsMap[off]}: "
    echo "$out"
    ;; # }}}
  --get-name) # {{{
    local i= ffu= exe="$0"
    local txt="ECHOR_NAME_$$"
    [[ ! -z ${!txt} ]] && echo "${!txt}" && return 0
    for ((i=0; i < ${#FUNCNAME[*]}; i++)); do # {{{
      case ${FUNCNAME[i]} in
      echor* | __echor_util | die);;
      dbg | dbgF | FAT | ERR | WRN | INF | DBG | TRC | dbgC);;
      source) # {{{
        local j=
        for ((j=0; j < ${#FUNCNAME[*]}; j++)); do
          [[ ${BASH_SOURCE[j]} == */echor ]] && continue
          exe=${BASH_SOURCE[j]}
          break
        done;; # }}}
      main | bash | '') break;;
      *) [[ -z $ffu ]] && ffu=${FUNCNAME[i]} && break;;
      esac
    done # }}}
    exe=${exe##*/}
    case $exe in
    environment | -) # {{{
      [[ $exe == '-' ]] && exe="inline" || exe=
      txt="ECHOR_NAME_$PPID"
      [[ ! -z ${!txt} ]] && echo "${!txt}" && return 0;; # }}}
    -bash | bash) exe='cli'; ${RCSTUFF_IN_BASHRC:-false} && exe='bashrc';;
    *)            exe="${exe%.sh}";;
    esac
    local ffu_name=$ffu exe_name=$exe
    exe=${exe^^} exe=${exe//./_} exe=${exe//-/_}
    ffu=${ffu^^} ffu=${ffu//./_} ffu=${ffu//-/_}
    local var_ffu=_${ffu}_DBG
    local var_exe=_${exe}_DBG
    local -n ref_ffu=$var_ffu
    local -n ref_exe=$var_exe
    local f_prev_to_last=${FUNCNAME[$((${#FUNCNAME[*]}-2))]}
    if [[ ! -z $ffu && ( ! -z $ref_ffu || $2 == '--no-fallback' || $exe_name == 'cli' ) ]]; then
      echo "$ffu_name"
    elif [[ ! -z $exe_name ]] && ( ( [[ $f_prev_to_last =~ ^_[a-z] && $f_prev_to_last == _$exe_name ]] ) || ( [[ ! -z ${BASH_ALIASES[$exe_name]} ]] ) ); then
      echo "$exe_name"
    elif [[ ! -z $ref_exe ]]; then
      echo "$exe_name"
    else
      echo "${ffu_name:-$exe_name}"
    fi;; # }}}
  --convert-to-var) # {{{
    local mod="${2:-$(__echor_util --get-name)}"
    mod="${mod//[.,:-]/_}"
    echo "_${mod^^}";; # }}}
  esac
} # }}}
echorm() { # @@ # {{{
  local flagsIn=$-
  set +xv
  local flagsOut=${flagsIn//[^xv]}
  [[ -z $COff && $colorsOn != false && $COLORS_ON != false ]] && source ${BASH_PATH:-$HOME/.bin/bash}/colors
  local fileCfg="$APPS_CFG_PATH/echor.names"
  if [[ $1 == '@@' ]]; then # {{{
    [[ -e $fileCfg ]] && source $fileCfg
    case $3 in
    -M | -m | --module | --name) # {{{
      if [[ $3 == '-M' ]]; then
        echo "@ Module-Name -Module-Name + +? - -?"
      elif [[ $3 == '--name' ]]; then
        echo "-Module-Name"
      fi
      (
        for i in $(find . -maxdepth 1 -name '*.sh') $(find ~/.bin -maxdepth 1 -name '*.sh'); do
          i="$(readlink -f $i)"
          [[ ! -e $i ]] && continue
          i="${i##*/}" && i="${i%.sh}"
          echo "$i"
        done
        echo "$ECHOR_KNOWN_NAMES"
        declare -Fx | cut -d' ' -f3 | command grep -v "^_"
      ) | tr ' ' '\n' | command grep -v "^_\|echor\|FAT\|ERR\|WRN\|INF\|DBG\|TRC";; # }}}
    -f) # {{{
      echo "on off 1 0 true false + - true:2 true:3";; # }}}
    -F) # {{{
      echo "on off 1 0 true false + -";; # }}}
    -l) # {{{
      echo "0 1 2 3 4";; # }}}
    -o | --out) # {{{
      echo "/dev/stdout /dev/stderr";; # }}}
    --msg) # {{{
      echo "Msg";; # }}}
    --pre) # {{{
      echo "- Prefix";; # }}}
    -f\?var) # {{{
      echo "DbgVar-then-ModuleVar -";; # }}}
    *) # {{{
      echo "-o --out -n - --colors=off --colors=force -C --msg --pre -l -f -f? -f?var -f?var- -f?? -f?- -F -F? -F?? -f- -M --check --name -nl -nh --header --module -m --push --pop -V"
      echo "-xv +xv -v +v"
      (
        echo "$ECHOR_KNOWN_NAMES"
        declare -Fx | cut -d' ' -f3
      ) | tr ' ' '\n' | command grep -v "^_\|echor\|FAT\|ERR\|WRN\|INF\|DBG\|TRC" | sed 's/^/+/';; # }}}
    esac
    if [[ ! -z $flagsOut ]]; then set -$flagsOut; fi
    return 0
  fi # }}}
  local verbose=false module= base= userMsg=
  # Switches that have to be parsed first # {{{
  while [[ ! -z $1 ]]; do
    case $1 in
    --module | -m) # {{{
      module="$2"
      if [[ $module == *::* ]]; then
        base="${module#*::}"
        module="${module%%::*}"
        [[ -z $base ]] && base="${module^^}"
      elif [[ $module == '-' ]]; then
        module=
      fi
      shift;; # }}}
    -V) # {{{
      verbose=true;; # }}}
    --name) # {{{
      shift
      if ! ${ECHOR_NAME_IGNORE:-false}; then
        local -n refTxt="ECHOR_NAME_$$"
        if [[ $1 == '-' ]]; then
          unset ECHOR_NAME_$$
        else
          [[ -e $fileCfg ]] && source $fileCfg
          export refTxt="${1#-}"
          if [[ $1 != '-'* && " $ECHOR_KNOWN_NAMES " != *" $refTxt "* ]]; then # {{{
            export ECHOR_KNOWN_NAMES+=" $refTxt"
            if [[ -e $fileCfg ]] && command grep -q "^export ECHOR_KNOWN_NAMES=" $fileCfg; then
              sed -i 's/^export ECHOR_KNOWN_NAMES=.*/export ECHOR_KNOWN_NAMES="'"$ECHOR_KNOWN_NAMES"'"/' $fileCfg
            else
              echo "export ECHOR_KNOWN_NAMES=\"$ECHOR_KNOWN_NAMES\"" >>$fileCfg
            fi
          fi # }}}
        fi
      fi;; # }}}
    -M | + | - | +*) # {{{
      [[ $1 == '-M' ]] && shift
      local origModule="$module" enable=${ECHOR_ENABLE_BY_DEFAULT:-true} i=
      module="$1"
      shift
      case $module in
      +\?*) # Enable if not disabled by purpose: echorm -f?- || echorm -M + # {{{
        module=${module#+?}
        echorm $([[ ! -z $module ]] && echo "--module $module") -f?- && return 0
        enable=true;; # }}}
      -\?*) # Disable if not enabled by purpose: echorm -f? || echorm -M - # {{{
        module=${module#-?}
        echorm $([[ ! -z $module ]] && echo "--module $module") -f?  && return 0
        enable=false;; # }}}
      +*)  module=${module#+}; enable=true;;
      -*)  module=${module#-}; enable=false;;
      esac
      [[ -z $module ]] && module="$origModule"
      case $module in
      @ | '') module="$(__echor_util --get-name --no-fallback)";;
      esac
      local base="$(__echor_util --convert-to-var "$module")"
      local -n refDbg="${base}_DBG"
      refDbg=$enable
      if [[ $1 == 0 ]]; then refDbg=false; shift
      elif [[ $1 =~ ^[0-9]+$ ]]; then refDbg+=":$1" && shift
      fi
      export refDbg
      ;; # }}}
    *) break;;
    esac; shift
  done # }}}
  if [[ -z $1 ]]; then # {{{
    if [[ ! -z $flagsOut ]]; then set -$flagsOut; fi
    return 0
  fi # }}}
  local colorMode='auto'
  local out="/dev/stderr" exitDo=false exitV=0 check=false checkRes=true echoParam=
  local printForce= level= levelCurrent= flags= justNL=false addHeader=true convertColors=false
  [[ -z $module ]] && module=$(__echor_util --get-name)
  [[ -z $base   ]] && base="$(__echor_util --convert-to-var "$module")"
  local moduleDbg="${base}_DBG" moduleDbgStack=${base}_DBG_STACK
  local -n refDbg=$moduleDbg refDbgStack=$moduleDbgStack
  if [[ -z $refDbg ]]; then # {{{
    if $verbose; then # {{{
      local moduleHelper="ECHOR_HELPER_${base}"
      local -n refHelper=$moduleHelper
      if [[ $refHelper != *printed:* ]]; then
        echo "echorm -M +$module" >/dev/stderr
        echo "export $moduleDbg=true" >/dev/stderr
        export refHelper+='printed:'
      fi
    fi # }}} # }}}
  else # {{{
    case $refDbg in
    true) # {{{
      level=1;; # }}}
    true:* | :*) # {{{
      level="${refDbg#*:}"
      [[ -z $level ]] && level=3;; # }}}
    [1-9]) # {{{
      level="$refDbg";; # }}}
    esac
  fi # }}}
  [[ -z $refDbg && $module == 'cli' ]] && export refDbg=true
  while [[ ! -z $1 ]]; do # {{{
    case $1 in
    -n)             echoParam="-n";;
    -nl)            justNL=true;;
    -nh)            addHeader=false;;
    --header)       addHeader=true;;
    --colors=force) colorMode=force;;
    --colors=off)   colorMode=off;;
    -C)             convertColors=true;;
    -o | --out)     out="$2"; shift;;
    --stdout | -1)  out=/dev/stdout; colorMode=force;;
    --1)            out=/dev/stdout; addHeader=false; colorMode=force;;
    --check)        check=true;;
    -v)             flags="-v";  [[ -z $levelCurrent ]] && levelCurrent=2;;
    +v)             flags="+v";  [[ -z $levelCurrent ]] && levelCurrent=2;;
    -xv)            flags="-xv"; [[ -z $levelCurrent ]] && levelCurrent=3;;
    +xv)            flags="+xv"; [[ -z $levelCurrent ]] && levelCurrent=3;;
    -l)             levelCurrent=$2; shift;;
    -l[0-9])        levelCurrent=${1#-l};;
    -f) # controls whether to print or not and set level # {{{
      local val=${2:-$refDbg}; shift
      case $val in
      true:* | :*) # {{{
        export refDbg="true:${val#*:}";; # }}}
      [1-9]) # {{{
        export refDbg="true:${val#*:}";; # }}}
      on  | + | true) # {{{
        export refDbg="true"
        ;; # }}}
      off | - | 0 | false | * ) # {{{
        export refDbg="false";; # }}}
      esac;; # }}}
    -f\?-) # returns true if logging is disabled # {{{
      case $refDbg in
      on  | + | [1-9] | true | true:* | :*)  exitV=1;;
      '') exitV=10;;
      *)  exitV=0;;
      esac
      shift $#;; # }}}
    -f\? | -f\?\? | -f\?var | -f\?var-) # returns true if logging is enabled, ?var: prints true/false, ??: prints logging level # {{{
      case $refDbg in
      on  | + | [1-9] | true | true:* | :*)  exitV=0;;
      '') exitV=10;;
      *)  exitV=1;;
      esac
      if [[ $1 == '-f?var'* ]]; then
        local v=false
        [[ $exitV == 0 ]] && v=true
        if [[ $1 == '-f?var' && $2 != '-' ]]; then
          shift
          echo "${1:-dbg}='$v' ${2:-module}='$module::$base'"
        else
          echo "$v"
        fi
      elif [[ $1 == '-f??' ]]; then
        echo "${level:-0}"
      fi
      shift $#;; # }}}
    -f-) # unset control variables aka clean-up # {{{
      unset $moduleDbg $moduleDbgStack
      shift $#;; # }}}
    -F) # forces to print (or deny) once # {{{
      case $2 in
      on  | + | 1 | true) # {{{
        printForce="force:on" ; shift;; # }}}
      off | - | 0 | false) # {{{
        printForce="force:off"; shift;; # }}}
      *) # {{{
        printForce="force:on";; # }}}
      esac;; # }}}
    -F\?) # prints control variables # {{{
      echo "$moduleDbg"
      [[ ! -z $refDbgStack ]] && echo "$moduleDbgStack"
      shift $#;; # }}}
    -F\?\?) # prints control variables (+values) # {{{
      echo "$moduleDbg=\"$refDbg\""
      [[ ! -z $refDbgStack ]] && echo "$moduleDbgStack=\"$refDbgStack\""
      shift $#;; # }}}
    --push) # {{{
      export refDbgStack="$refDbg::$refDbgStack";; # }}}
    --pop) # {{{
      if [[ ! -z $refDbgStack ]]; then
        local v=${refDbgStack%%::*}
        refDbg=${v%::}
        refDbgStack=${refDbgStack#*::}
      fi;; # }}}
    --msg) # {{{
      userMsg=$2; shift;; # }}}
    --pre) # {{{
      shift
      export ECHOR_PREFIX="$1"
      [[ $ECHOR_PREFIX == '-' ]] && ECHOR_PREFIX=;; # }}}
    -) shift; break;;
    *) # {{{
      if [[ $1 == 0 ]]; then
        printForce="force:on"; shift
      elif [[ $1 =~ ^-?[0-9]+$ ]]; then
        levelCurrent=$1; shift
      fi
      break;; # }}}
    esac; shift
  done # }}}
  if [[ $printForce != 'force:on' ]]; then # {{{
    local dbgVal=false
    case $refDbg in
    on  | + | 1 | true | true:* | :*) dbgVal=true;;
    esac
    if ! $dbgVal;then
      $verbose && echo "Not printed due to dbg flag: $moduleDbg=$refDbg" >/dev/stderr
      exitDo=true; checkRes=false
    elif [[ ! -z $levelCurrent && $levelCurrent -gt $level ]]; then
      $verbose && echo "Not printed due to log level: $levelCurrent > $level, $moduleDbg=$refDbg" >/dev/stderr
      exitDo=true; checkRes=false
    elif ! $check && ! $justNL && [[ -z $1 ]];then
      $verbose && echo "Not printed due to no input" >/dev/stderr
      exitDo=true
    elif [[ $printForce == "force:off" ]]; then
      $verbose && echo "Not printed due to forced off" >/dev/stderr
      exitDo=true; checkRes=false
    fi
  fi # }}}
  if ! $check && ! $exitDo && $justNL && [[ -z $1 ]]; then # {{{
    echo >$out
    exitDo=true
  fi # }}}
  if $check || [[ ! -z $flags ]]; then # {{{
    $checkRes || flags=
    exitDo=true; shift $#
    if $check; then
      if $checkRes; then
        [[ -z $levelCurrent ]] && echo 0:$level || echo 10:$level
        exitV=0
      else
        echo 1
        exitV=1
      fi
    fi
  fi # }}}
  if $exitDo; then # {{{
    if [[ ! -z $flags ]]; then set $flags
    elif [[ ! -z $flagsOut ]]; then set -$flagsOut
    fi
    return $exitV
  fi # }}}
  local colorsOn=${colorsOn:-${COLORS_ON:-true}}
  if false \
     || ( [[ $out == /dev/stderr && ! -t 2 && $colorMode != 'force' ]] ) \
     || ( [[ $out == /dev/stdout && ! -t 1 && $colorMode != 'force' ]] ) \
     || [[ $colorMode == 'off' ]]; then # {{{
    colorsOn=false
  elif [[ $colorMode == 'force' ]]; then
    colorsOn=true
  fi # }}}
  local str=
  $convertColors && str="$(eval printfc "${@@Q}")" && str="${str#\'}" && str="${str%\'}"
  echo -e $echoParam "$($addHeader && __echor_util --get-header -c:$colorsOn -m:$module --msg:"$userMsg" -l:${levelCurrent:-1}/$level)${str:-$@}" >$out
  if [[ ! -z $flagsOut ]]; then set -$flagsOut; fi
} # }}}
echormf() { # {{{
  local f=${FUNCNAME[1]} exe=${0##*/}
  [[ ! -z $f ]] || return 0
  [[ _$exe == $f* ]] && f=${f#_}
  echorm -m $f "$@"
} # }}}
echor() { # @@ # {{{
  local flagsIn=$-
  set +xv
  local flagsOut=${flagsIn//[^xv]}
  if [[ $1 == '@@' ]]; then # {{{
    case $3 in
    -o | --out) # {{{
      echo "/dev/stdout /dev/stderr";; # }}}
    --pre) # {{{
      echo "- Prefix";; # }}}
    --msg) # {{{
      echo "Msg";; # }}}
    *)  echo "--stdout -1 -o --out - --colors=off --colors=force -C --msg --pre --check -M -n -e -c -cn -nh --header -h +1";;
    esac
    if [[ ! -z $flagsOut ]]; then set -$flagsOut; fi
    return 0
  fi # }}}
  local colorMode='auto'
  local str= out="/dev/stderr" exitDo=false exitV=0 addHeader= convertColors=false insertLine=false
  local paramsEcho= checkDo=false checkNeg=false levelCurrent= level= userMsg=
  while [[ ! -z $1 ]]; do # {{{
    case $1 in
    -nh)            addHeader=false;;
    -h | --header)  addHeader=true;;
    --colors=force) colorMode=force;;
    --colors=off)   colorMode=off;;
    -C)             convertColors=true;;
    -o | -out)      out="$2"; shift;;
    --stdout | -1)  out=/dev/stdout; colorMode=force;;
    --1)            out=/dev/stdout; addHeader=false; colorMode=force;;
    +1)             insertLine=true;;
    -n | -e)        paramsEcho+=" $1";;
    -c)             checkDo=true;;
    -cn)            checkDo=true; checkNeg=true;;
    --msg) # {{{
      userMsg=$2; shift;; # }}}
    --pre) # {{{
      shift
      export ECHOR_PREFIX="$1"
      [[ $ECHOR_PREFIX == '-' ]] && ECHOR_PREFIX=
      [[ -z $2 ]] && exitDo=true;; # }}}
    --check | -M) # {{{
      local checkRes=$(echorm --check $2)
      case $checkRes in
      0:*)  level=${checkRes#0:};;
      10:*) levelCurrent=$2; level=${checkRes#10:}; shift;;
      *)  if [[ ! -z $flagsOut ]]; then set -$flagsOut; fi; return 0;;
      esac;; # }}}
    -) shift; break;;
    *) # {{{
      if [[ ! -z $_echor_ref_l && $1 =~ ^-?[0-9]+$ ]]; then
        if [[ $1 -gt $_echor_ref_l ]]; then
          shift $# && exitDo=true
        else
          _echor_pre+="-${1#-}"
          shift
        fi
      fi
      break;; # }}}
    esac
    shift
  done # }}}
  if ! $exitDo; then # {{{
    ${ECHOR_OFF:-false} && exitDo=true
  fi # }}}
  if $exitDo; then # {{{
    if [[ ! -z $flagsOut ]]; then set -$flagsOut; fi
    return $exitV
  fi # }}}
  if $checkDo; then # {{{
    local sT="$2" sF="$3"
    local cond=$1
    [[ $cond == -* ]] && checkNeg=true && cond=${cond#-}
    if $checkNeg; then # {{{
      local sTmp="$sT"
      sT="$sF"
      sF="$sTmp"
    fi # }}}
    case $cond in
    true  | 0)                str="$sT";;
    false | [1-9][0-9]* | '') str="$sF";;
    *)
      if eval "$cond" >/dev/null 2>&1; then
        str="$sT"
      else
        str="$sF"
      fi;;
    esac
    shift $#
    if [[ -z "$str" ]]; then
      if [[ ! -z $flagsOut ]]; then set -$flagsOut; fi
      return 0
    fi
  fi # }}}
  local colorsOn=${colorsOn:-${COLORS_ON:-true}}
  if false \
     || ( [[ $out == /dev/stderr && ! -t 2 && $colorMode != 'force' ]] ) \
     || ( [[ $out == /dev/stdout && ! -t 1 && $colorMode != 'force' ]] ) \
     || [[ $colorMode == 'off' ]]; then # {{{
    colorsOn=false
  elif [[ $colorMode == 'force' ]]; then
    colorsOn=true
  fi # }}}
  if [[ -z $str && ! -z $@ ]]; then
    $convertColors && str="$(eval printfc "${@@Q}")" || str="$@"
    shift $#
  fi
  local insertLineAddHeader=true
  if [[ -z $addHeader ]]; then
    [[ ! -z $str ]] && addHeader=true || addHeader=false
    $insertLine && insertLineAddHeader=false
  fi
  echo -e $paramsEcho "$($addHeader && __echor_util --get-header -c:$colorsOn -m:-cli -l:${levelCurrent:-1}/$level)$str" >$out
  if $insertLine; then
    echo -e $paramsEcho "$($insertLineAddHeader && __echor_util --get-header -c:$colorsOn -m:-cli --msg:"$userMsg" -l:${levelCurrent:-1}/$level)" >$out
  fi
  if [[ ! -z $flagsOut ]]; then set -$flagsOut; fi
} # }}}
echorc() { # @@ # {{{
  if [[ $1 == '@@' ]]; then
    echor $@
    echor $@ '' -c
    return 0
  fi
  echor -c "$@"
} # }}}
echorv() { # @@ # {{{
  local evFIn=$-
  set +xv
  local evFOut=${evFIn//[^xv]}
  if [[ $1 == '@@' ]]; then # {{{
    case $3 in
    -o | --out) # {{{
      echo "/dev/stdout /dev/stderr";; # }}}
    --pre) # {{{
      echo "message-prefix";; # }}}
    --msg) # {{{
      echo "Msg";; # }}}
    -d) # {{{
      echo ":";; # }}}
    *) # {{{
      echo "--stdout -1 -o --out - --colors=off --colors=force --msg --check -M -nl --no-nl -nh --header --pair -Name@Variable -d -e --export -xc --pre"
      compgen -v;; # }}}
    esac
    if [[ ! -z $ev_fOut ]]; then set -$ev_fOut; fi
    return 0
  fi # }}}
  local evColorMode='auto'
  local evStr= evOut="/dev/stderr" evExit=false evExitV=0 evSep="\n" evAddHeader=true evLevelCurrent= evLevel= evValSep= evExportMode=false evUseClip=false evUserMsg
  while [[ ! -z $1 ]]; do # {{{
    case $1 in
    -nh)            evAddHeader=false;;
    --header)       evAddHeader=true;;
    -e | --export)  evExportMode=true; evSep="\n";;
    -xc)            evUseClip=true;;
    -d)             evValSep="$2"; shift;;
    --colors=force) evColorMode=force;;
    --colors=off)   evColorMode=off;;
    -o | --out)     evOut="$2"; shift;;
    --stdout | -1)  evOut=/dev/stdout; evColorMode=force;;
    --1)            evOut=/dev/stdout; evAddHeader=false; evColorMode=force;;
    -nl)            evSep="\n";;
    --no-nl)        evSep=" ";;
    --pre) # {{{
      shift
      export ECHOR_PREFIX="$1"
      [[ $ECHOR_PREFIX == '-' ]] && ECHOR_PREFIX=
      ;; # }}}
    --msg) # {{{
      evUserMsg=$2; shift;; # }}}
    --check | -M) # {{{
      local evCheckRes=$(echorm --check $2)
      case $evCheckRes in
      0)    ;;
      0:*)  evLevel=${evCheckRes#0:};;
      10:*) evLevelCurrent=$2; evLevel=${evCheckRes#10:}; shift;;
      *)    if [[ ! -z $flagsOut ]]; then set -$flagsOut; fi; return 0;;
      esac;; # }}}
    -) shift; break;;
    *) # {{{
      if [[ ! -z $_echor_ref_l && $1 =~ ^-?[0-9]+$ ]]; then
        if [[ $1 -gt $_echor_ref_l ]]; then
          shift $# && evExit=true
        else
          _echor_pre+="-${1#-}"
          shift
        fi
      fi
      break;; # }}}
    esac
    shift
  done # }}}
  if ! $evExit; then # {{{
    if [[ -z $1 ]]; then evExit=true
    elif ${ECHOR_OFF:-false}; then evExit=true
    fi
  fi # }}}
  if $evExit; then # {{{
    if [[ ! -z $evFOut ]]; then set -$evFOut; fi
    return $evExitV
  fi # }}}
  ev_fGetValue() { # {{{
    case $1 in
    --is-array) # {{{
      [[ $(declare -p $2 2>/dev/null) =~ ^"declare -a" || $(declare -p $2 2>/dev/null) =~ ^"declare -A" ]] 2>/dev/null
      return $?;; # }}}
    --get-array-value) # {{{
      local _vv="$(declare -p $2 2>/dev/null)"
      [[ $_vv == *=* ]] && echo "$_vv" | sed 's/[^=]*=//' || echo "()"
      return 0;; # }}}
    '') # {{{
      return 0;; # }}}
    *) # {{{
      local _echor_n=$1 _echor_vn=$2
      [[ $# == 1 ]] && _echor_vn=$1
      local _echor_vv=
      if ! $evExportMode; then
        if ev_fGetValue --is-array $_echor_vn; then
          _echor_vv="$(ev_fGetValue --get-array-value $_echor_vn)"
        else
          _echor_vv="${!_echor_vn}"
          [[ ! -z $evValSep ]] && _echor_vv="$(echo "$_echor_vv" | tr "$evValSep" "\n")"
        fi
        echo "$evColorVar$_echor_n$evColorOffVar=[$_echor_vv$evColorOffVar]"
      else
        local _echor_decl="$(declare -p "$_echor_n" 2>/dev/null| sed 's/=.*//')"
        case "$_echor_decl" in
        'declare -Ax '* | 'declare -ax '*)
          _echor_vv="$(ev_fGetValue --get-array-value $_echor_vn)"
          echo "${_echor_decl/ $_echor_n/ $evColorVar$_echor_n$evColorOffVar}=$_echor_vv";;
        'declare -A '*  | 'declare -a '* )
          _echor_vv="$(ev_fGetValue --get-array-value $_echor_vn)"
          _echor_decl="${_echor_decl/ $_echor_n/ $evColorVar$_echor_n$evColorOffVar}"
          echo "${_echor_decl/declare/declare -x}=$_echor_vv";;
        *)
          _echor_vv="${!_echor_vn}"
          [[ ! -z $evValSep ]] && _echor_vv="$(echo "$_echor_vv" | tr "$evValSep" "\n")"
          echo "export $evColorVar$_echor_n$evColorOffVar=\"${_echor_vv}\"";;
        esac
      fi
      return 0;; # }}}
    esac
  } # }}}
  local colorsOn=${colorsOn:-${COLORS_ON:-true}}
  local evColorVar=$(__echor_util --get-color var) evColorOffVar=$(__echor_util --get-color off)
  if false \
     || ( [[ $evOut == /dev/stderr && ! -t 2 && $evColorMode != 'force' ]] ) \
     || ( [[ $evOut == /dev/stdout && ! -t 1 && $evColorMode != 'force' ]] ) \
     || [[ $evColorMode == 'off' ]]; then # {{{
    colorsOn=false evColorVar= evColorOffVar=
  elif [[ $colorMode == 'force' ]]; then
    colorsOn=true
  fi # }}}
  local evStrNoColor=
  while [[ ! -z $1 ]]; do # {{{
    local evValue=
    case $1 in
    --pair) # {{{
      evValue="$(ev_fGetValue "$2" "$3")"; shift 2;; # }}}
    -*@*) # {{{
      local _echor_n=${1%%@*} _echor_v=${1#*@}
      evValue="$(ev_fGetValue ${_echor_n#-} "${_echor_v}")";; # }}}
    *) # {{{
      evValue="$(ev_fGetValue $1)";; # }}}
    esac; shift
    [[ ! -z $evStr ]] && evStr+="$evSep"
    evStr+="$evValue"
    if $evUseClip; then # {{{
      [[ ! -z $evColorVar ]] && evValue="${evValue/$evColorVar}" && evValue="${evValue/$evColorOffVar}"
      [[ ! -z $evStrNoColor ]] && evStrNoColor+="\n"
      evStrNoColor+="$evValue"
    fi # }}}
  done # }}}
  unset ev_fGetValue
  $evUseClip && [[ ! -z $evStrNoColor && -z $evValSep ]] && echo -e "$evStrNoColor" | xc
  local header=$($evAddHeader && __echor_util --get-header -c:$colorsOn -m:-cli --msg:"$evUserMsg" -l:${evLevelCurrent:-1}/$evLevel)
  [[ -z $evStr ]] && return 0
  echo -e "$evStr" \
  | if [[ ! -z $header ]]; then
      sed 's/^/'"$header"'/'
    else
      cat -
    fi >$evOut
  if [[ ! -z $evFOut ]]; then set -$evFOut; fi
} # }}}
echore() { # {{{
  if [[ $1 == '--check' || $1 == '-M' ]]; then # {{{
    case $(echorm --check $2) in
    0)  shift;;
    10) shift 2;;
    *)  return 0;;
    esac
  fi # }}}
  echo "$@" >/dev/stderr
} # }}}
get-ts() { # @@ # {{{
  if [[ $1 == '@@' ]]; then # {{{
    case $3 in
    -o) # {{{
      echo s{,.{m,u,n}s} ms{,.{u,n}s} ns{,.us} us;; # }}}
    *) # {{{
      echo "-u --add-unit -p --precise -r --raw -o"
      echo "REF-TIME-then-NOW-TIME";; # }}}
    esac
    return 0
  fi # }}}
  local now="${EPOCHREALTIME/[,.]}"
  [[ ! -z $now ]] && now="${now}000"
  local unit='us' out= ref=0 addUnit=false skipSettingNow=false
  [[ -z $1 ]] && out='raw'
  while [[ ! -z $1 ]]; do # {{{
    case $1 in
    -u | --add-unit) addUnit=true;;
    -p | --precise)  unit='ns';;
    -r | --raw)      out='raw';;
    -o)              out=$2; shift;;
    -o=*)            out=${1#-o=};;
    *)               ref=$1; [[ ! -z $2 ]] && now=$2 && skipSettingNow=true; shift $#; break;;
    esac; shift
  done # }}}
  case $unit in # {{{
  us) [[ -z $now ]] && now=$(command date +%s%N);;
  ns) ( ! $skipSettingNow || [[ -z $now ]] ) && now=$(command date +%s%N);;
  esac # }}}
  local diff= div=1 fraction= unitS= digs=3 sign=1
  [[ $now != '-' && $now != 0 ]] && diff=$((now - ref)) || diff=$ref
  if [[ -z $out ]]; then
    [[ -t 1 ]] && out="$unit" || out='raw'
  fi
  case $out in # {{{
  raw)       echo "$diff"; return 0;;
  s  | s.*)  div=1000000000;;
  ms | ms.*) div=1000000;;
  us | us.*) div=1000;;
  ns)        div=1;;
  *)         echorm 0 "Unsupported output format: '$out'"; return 1;;
  esac # }}}
  case $out in # {{{
  s.3  | s.ms)  fraction=1000000; digs=3;;
  s.6  | s.us)  fraction=1000;    digs=6;;
  s.9  | s.ns)  fraction=1;       digs=9;;
  ms.3 | ms.us) fraction=1000     digs=3;;
  ms.6 | ms.ns) fraction=1;       digs=6;;
  us.3 | us.ms) fraction=1;       digs=3;;
  *.*)          echorm 0 "Unsupported output format: '$out'"; return 1;;
  esac # }}}
  $addUnit && unitS="${out%%.*}"
  if [[ -z $fraction ]]; then # {{{
    echo "$((diff / div))$unitS" # }}}
  else # {{{
    [[ $diff -lt 0 ]] && sign=-1
    printf "%d.%0${digs}d%s\n" "$((diff / div))" "$((sign * (diff / fraction) % (div / fraction)))" "$unitS"
  fi # }}}
} # }}}
die() { # {{{
  local mode='exit' retVal=1 n=1 silent=false
  case ${FUNCNAME[1]} in # {{{
  '') # {{{
    case $0 in
    bash | -bash) mode='return';
    esac;; # }}}
  main | bash | source);;
  *) mode='return';;
  esac # }}}
  while [[ ! -z $1 ]]; do # {{{
    case $1 in
    -r  | --return)  mode='return';;
    -e  | --exit)    mode='exit';;
    -c  | --cont)    mode='continue';;
    -c* | --cont=*)  mode='continue'; n=$1; n=${n#-c}; n=${n#--cont=};;
    -b  | --break)   mode='break';;
    -b* | --break=*) mode='break';    n=$1; n=${n#-b}; n=${n#--break=};;
    -rv | --ret-val) retVal=$2; shift;;
    -s)              silent=true;;
    -s=true | -s=false) silent=${1#-s=};;
    -s=!true)        silent=false;;
    -s=!false)       silent=true;;
    *) break;;
    esac; shift
  done # }}}
  [[ $# -gt 1 ]] && retVal=$1 && shift
  if [[ ! -z $1 ]]; then # {{{
    echor "$@"
  elif ! $silent; then
    echor "dying..."
  fi # }}}
  case $mode in
  exit)      exit $retVal;;
  return)    echo "return $retVal";;
  continue)  echo "continue $n";;
  break)     echo "break $n"
  esac
} # }}}
export -f __echor_util echorm echormf echor echorc echorv echore die get-ts
export ECHOR_PATH="$BASH_ESSENTIALS_PATH/aliases.d"
export PHISTORY_IGNORED_COMMANDS+=":get-ts:die"

