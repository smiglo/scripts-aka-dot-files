#!/usr/bin/env bash
# vim: fdl=0

__cd_util() { # {{{
  local fileStored="$TMP_MEM_PATH/.cd.stored"
  case $1 in
  --list-parents) # {{{
    shift
    local cDir="${1:-$PWD}"
    local stdout=$(i=1; while true; do
      p="$(command cd "$cDir/$(eval printf "../%.0s" {1..$i})"; pwd | sed -e "s|^$HOME|~|")"
      if [[ ${#p} -ge 120 ]]; then
        while [[ ${#p} -ge 120 ]]; do
          p="${p#*/}"
        done
        p=".../$p"
      fi
      printf "%d. %s\n" "$i" "$p"
      i=$(($i+1))
      [[ $p == '/' ]] && break
    done)
    echo "$stdout";; # }}}
  --tilde-conv) # {{{
    shift
    local d="$1"
    [[ $d == '~'* ]] && d="${d/\~/$HOME}"
    echo "$d";; # }}}
  --update-dst) # {{{
    shift
    local key="$(echo -e "$1" | sed -n '1p')"
    local dst="$(echo -e "$1" | sed -n '2p')"
    if [[ -z $2 ]]; then
      dst="${dst#*. }"
    elif [[ "$2" == eval\ * ]]; then
      dst="$($2)"
    else
      dst="$(eval echo "$2")"
    fi
    echo -en "$key\n$dst";; # }}}
  --cd-param) # {{{
    local dst= i=; shift
    [[ ! -z $2 && $2 != '--cd-spec' ]] && echo $2 && return 0
    case $1 in
    tmux) # {{{
      [[ ! -n $TMUX ]] && return 0
      dst="$(tmux show-options -qv @tmux_path)";; # }}}
    docs) # {{{
      if [[ -e "$DOCS_PATH" ]]; then
        dst="$DOCS_PATH"
      elif [[ -e "$HOME/Documents" ]]; then
        dst="$HOME/Documents"
      fi;; # }}}
    *) # {{{
      for i in $BASH_PROFILES_FULL; do
        [[ -e $i/aliases ]] && dst="$($i/aliases __util_cd_param $1)"
        [[ ! -z $dst ]] && break
      done;; # }}}
    esac
    echo "$dst";; # }}}
  --prompt) # {{{
    local dst=$2 prompt=
    [[ $dst == $HOME ]] && prompt="~" || prompt="$(basename $dst)"
    echo "$prompt";; # }}}
  --del-from-cache) # {{{
    [[ -e $fileStored ]] || return 1
    sed -i '/^'"$1"' '"${PWD//\//@}"' # {\{3\}/,/^# }\{3\}/d' $fileStored;; # }}}
  --find-in-cache) # {{{
    [[ -e $fileStored ]] || return 1
    shift
    local c=${2:-5} p="$PWD" ret=
    while true; do
      ret="$(sed -n '/^'"$1"' '"${p//\//@}"' # {\{3\}/,/^# }\{3\}/p' $fileStored | sed -e '1d' -e '$d')"
      [[ ! -z $ret ]] && break
      p=${p%/*}
      [[ -z $p ]] && break
      c=$((c - 1))
      [[ $c == 0 ]] && break
    done
    echo "$ret";; # }}}
  --add-to-cache) # {{{
    shift
    (
      echo "$1 ${PWD//\//@} # {{{"
      echo "$2"
      echo "# }}}"
    ) >>$fileStored;; # }}}
  esac
} # }}}
__cd_util_mode_parent() { # {{{
  local dst=
  case $1 in
  .[0-9]*) # {{{
    if [[ ! -e "$1" ]]; then
      dst="$(eval printf "../%.0s" {1..${1:1}})"
      [[ ! -z $2 ]] && dst+="/$2" && shift
    else
      dst="$1"
    fi;; # }}}
  .) # {{{
    if [[ -z $2 ]]; then
      stdout="$(__cd_util --list-parents)"
      if $use_fzf; then
        dst="$(echo -e "$stdout" | fzf $fzf_common_params --prompt='Parent> ')" || return 0
        dst="$(__cd_util --update-dst "$dst" 'eval dst="${dst%%. *}" && eval printf ../%.0s {1..$dst}')"
      else
        echo "$stdout"
        return 0
      fi
    else
      dst="../$2" && shift
    fi;; # }}}
  esac
  echo "$dst"
} # }}}
__cd_util_mode_previous() { # {{{
  local dst=
  case $1 in
  ,[0-9]*) # {{{
    if [[ ! -e "$1" ]]; then
      len=${#CD_LAST_DIRS[*]}
      [[ -z $CD_LAST_DIRS || ${1:1} -ge $len ]] && return 1
      dst="${CD_LAST_DIRS[$(($len-${1:1}-1))]}"
      [[ ! -z $2 ]] && dst+="/$2" && shift
    else
      dst="$1"
    fi;; # }}}
  ,) # {{{
    [[ -z $CD_LAST_DIRS ]] && return 0
    len=${#CD_LAST_DIRS[*]}
    [[ $len == 1 ]] && return 0
    if [[ -z $2 ]]; then
      stdout=$(for i in $(seq $(($len-1)) -1 0); do
        [[ ${CD_LAST_DIRS[$i]} == $PWD ]] && continue
        printf "%d. %s\n" $(($len-2-$i+1)) "$(echo ${CD_LAST_DIRS[$i]} | sed "s|^$HOME|~|")"
      done)
      if $use_fzf; then
        dst="$(echo -e "$stdout" | fzf $fzf_common_params --prompt='Last> ')" || return 0
        dst="$(__cd_util --update-dst "$dst")"
      else
        echo "$stdout"
        return 0
      fi
      [[ -z $dst ]] && return 1
    else
      dst="${CD_LAST_DIRS[$len-1]}/$2" && shift
    fi;; # }}}
  esac
  echo "$dst"
} # }}}
__cd_util_mode_stored() { # {{{
  local dst= stdout=
  while true; do # while for implementation of completion with a form of ': ...'
    case $1 in
    : | ::) # {{{
      [[ $2 == :* ]] && shift && continue
      local fileStored="$TMP_MEM_PATH/.cd.stored"
      if [[ $1 == :: ]]; then
        __cd_util --del-from-cache F
      else
        stdout="$(__cd_util --find-in-cache F 5)"
      fi
      if [[ -z $stdout ]]; then
        [[ -n $TMUX ]] && { eval $(tmux show-environment -gs CD_LAST_DIRS_STORED 2>/dev/null) || true; }
        cd_list=$CD_LAST_DIRS_STORED
        local list="$(for i in $BASH_PROFILES_FULL; do
          [[ -e $i/aliases ]] && $i/aliases __util_cd_param @@ | tr ' ' '\n' | sed 's/$/@--cd-spec/' | tr '\n' ':' 2>/dev/null
        done)"
        list="$(echo -e "$cd_list:$list" | tr ':' '\n' | sed '/^ *$/d' | sort -u | tr '\n' ':')"
        IFS=':' && read -ra cd_list < <(echo -e "$list") && IFS=$oldIFS
        [[ -z $cd_list ]] && return 1
        progress --mark --msg "Obtaining dirs" --out /dev/stderr
        stdout=$(ii=0; for i in ${!cd_list[*]}; do
          key="${cd_list[$i]/@*}"
          p="$(__cd_util --cd-param "$key" "${cd_list[$i]/*@}")"
          [[ ! -z $p ]] && ii=$((ii + 1)) && printf "%2d. %12s: %s\n" "$ii" "${key:0:12}" "$(echo -e "$p" | sed "s|^$HOME|~|")"
        done)
        progress --unmark
        __cd_util --add-to-cache F "$stdout"
      fi
      if $use_fzf; then
        dst="$(echo -e "$stdout" | fzf $fzf_common_params  --prompt='Stored> ')" || return 0
        dst="$(__cd_util --update-dst "$dst" '${dst#*: }')"
      else
        echo "$stdout"
        return 0
      fi
      ;; # }}}
    :+|:++)  # {{{
      local param=$1
      p=$2; shift
      if [[ -z $p ]]; then
        [[ -n $TMUX ]] && tmux set-environment -g CD_LAST_DIRS_STORED "$CD_LAST_DIRS_STORED"
        return 0
      fi
      local path=$PWD
      [[ ! -z $2 ]] && path=$2 && shift
      [[ -n $TMUX ]] && { eval $(tmux show-environment -gs CD_LAST_DIRS_STORED 2>/dev/null) || true; }
      cd_list=$CD_LAST_DIRS_STORED
      if [[ ! -z $cd_list ]]; then
        IFS=':' && read -ra cd_list <<< "$cd_list" && IFS=$oldIFS
        for i in ${!cd_list[*]}; do
          [[ $p    == ${cd_list[$i]/@*} ]] && return 1
          [[ $path == ${cd_list[$i]/*@} ]] && return 1
          out+=":${cd_list[$i]}"
        done
      fi
      out+=":$p@$path"
      export CD_LAST_DIRS_STORED="${out:1}"
      [[ -n $TMUX ]] && tmux set-environment -g CD_LAST_DIRS_STORED "$CD_LAST_DIRS_STORED"
      dst="env:export CD_LAST_DIRS_STORED='$CD_LAST_DIRS_STORED';$dst"
      if [[ $param == ':++' ]]; then
        sed -i "/export CD_LAST_DIRS_STORED+=:$p/ d" $RUNTIME_FILE
        echo "export CD_LAST_DIRS_STORED+=:$p@$path" >> $RUNTIME_FILE
      fi
      return 0;; # }}}
    :-) # {{{
      p=$2; shift
      [[ -z $p ]] && return 1
      [[ -n $TMUX ]] && { eval $(tmux show-environment -gs CD_LAST_DIRS_STORED 2>/dev/null) || true; }
      cd_list=$CD_LAST_DIRS_STORED
      [[ -z $cd_list ]] && return 0
      IFS=':' && read -ra cd_list <<< "$cd_list" && IFS=$oldIFS
      for i in ${!cd_list[*]}; do
        [[ $p == ${cd_list[$i]/@*} ]] && continue
        out+=":${cd_list[$i]}"
      done
      export CD_LAST_DIRS_STORED="${out:1}"
      [[ -n $TMUX ]] && tmux set-environment -g CD_LAST_DIRS_STORED "$CD_LAST_DIRS_STORED"
      dst="env:export CD_LAST_DIRS_STORED='$CD_LAST_DIRS_STORED';$dst"
      return 0;; # }}}
    # Search: :?* :??* # {{{
    :\?* ) # {{{
      case $1 in
      :\?\?*) # {{{
        p="${1:3}"
        [[ -z $p ]] && return 1
        p=$(echo "$p" | sed -e "s/\(.\)/\1\.\*/g" -e "s/^/\.\*/")
        [[ $p == *.\*$.\* ]] && p=${p/.\*$.\*/$};; # }}}
      :\?* ) # {{{
        p=${1:2}
        [[ -z $p ]] && return 1;; # }}}
      esac
      [[ -n $TMUX ]] && { eval $(tmux show-environment -gs CD_LAST_DIRS_STORED 2>/dev/null) || true; }
      cd_list=$CD_LAST_DIRS_STORED
      [[ -z $cd_list ]] && return 1
      IFS=':' && read -ra cd_list <<< "$cd_list" && IFS=$oldIFS
      out=()
      for i in ${!cd_list[*]}; do
        [[ ${cd_list[$i]/*@} == '--cd-spec' ]] && continue
        echo ${cd_list[$i]/*@} | command grep -q "$p" && out[${#out[*]}]=${cd_list[$i]/*@}
      done
      [[ -z $out ]] && return 1
      if [[ ${#out[*]} == 1 ]]; then
        dst=${out[0]}
      else
        stdout=$(for i in ${!out[*]}; do
          printf "%2d. %s\n" "$(($i+1))" "$(echo -e "${out[$i]}" | sed "s|^$HOME|~|")"
        done)
        if $use_fzf; then
          dst="$(echo -e "$stdout" | fzf $fzf_common_params --prompt='Search> ')" || return 0
          dst="$(__cd_util --update-dst "$dst")"
        else
          echo "$stdout"
          return 0
        fi
        [[ -z $dst ]] && return 1
      fi;; # }}}
      # }}}
    :*) # {{{
      p=${1:1}
      [[ -n $TMUX ]] && { eval $(tmux show-environment -gs CD_LAST_DIRS_STORED 2>/dev/null) || true; }
      cd_list=$CD_LAST_DIRS_STORED
      [[ -z $cd_list ]] && return 1
      IFS=':' && read -ra cd_list <<< "$cd_list" && IFS=$oldIFS
      for i in ${!cd_list[*]}; do
        [[ $p == ${cd_list[$i]/@*} ]] && dst=$(__cd_util --cd-param "$p" "${cd_list[$i]/*@}") && break
      done
      if [[ -z $dst ]]; then
        dst=$(__cd_util --cd-param "$p")
      fi
      [[ -z $dst ]] && return 1
      [[ ! -z $2 ]] && dst+="/$2" && shift
      ;; # }}}
    esac
    break
  done
  echo "$dst"
} # }}}
__cd_util_mode_children() { # {{{
  local dst=
  case $1 in
  '??' | '??'* ) # {{{
    [[ $1 == '??' ]] && { p=$2; shift; } || p=${1:2}
    [[ -z $p ]] && return 1
    p=$(echo "$p" | sed -e "s/\(.\)/\1\.\*/g" -e "s/^/\.\*/")
    [[ $p == *.\*$.\* ]] && p=${p/.\*$.\*/$};; # }}}
  '?' | '?'* ) # {{{
    [[ $1 == '?' ]] && { p=$2; shift; } || p=${1:1}
    [[ -z $p ]] && return 1;; # }}}
  esac
  out=()
  while read i; do
    out[${#out[*]}]="$i"
  done < <(find . -maxdepth 10 $(! $IS_MAC && echo '-readable') -not -path '*/\.*' -type d -print 2>/dev/null | command grep $p)
  [[ ${#out[*]} == 0 ]] && return 1
  if [[ ${#out[*]} == 1 ]]; then
    dst="${out[0]}"
  else
    stdout=$(for i in ${!out[*]}; do
      printf "%2d. %s\n" "$(($i+1))" "${out[$i]}"
    done)
    if $use_fzf; then
      dst="$(echo -e "$stdout" | fzf $fzf_common_params --prompt='Search> ')" || return 0
      dst="$(__cd_util --update-dst "$dst")"
    else
      echo "$stdout"
      return 0
    fi
    [[ -z $dst ]] && return 1
  fi
  echo "$dst"
} # }}}
__cd_util_mode_interactive() { # {{{
  local dst=
  case $1 in
  -i | -[0-9]*) # {{{
    # Env configutation # {{{
    local \
      fzf_params="${CD_INTERACTIVE_FZF_PARAMS:--e -x}"    \
      md="${CD_INTERACTIVE_DEPTH:-1}"                     \
      loop="${CD_INTERACTIVE_LOOP:-true}"                 \
      add_parent_dirs="${CD_INTERACTIVE_PARENT:-true}"    \
      add_predefined="${CD_INTERACTIVE_PREDEFINED:-all}"  \
      add_stored="${CD_INTERACTIVE_STORED:-none}"         \
      add_user_list="${CD_INTERACTIVE_USER:-true}"        \
      root="${CD_INTERACTIVE_ROOT}"
    # }}}
    [[ $1 == -[0-9]* ]] && md="${1#-}"
    dst="." && shift
    local res= tmux_p= list= prompt= cd_list= tmp= k= v= predefined_list= user_list= fixed_list= query= first=true
    while [[ ! -z $1 ]]; do # {{{
      case $1 in
      [0-9]*)             md="$1";;
      --no-first)         first=false;;
      --fzf-params)       fzf_params="$2"; shift;;
      -l   | --loop)      loop=true;;
      --parent)           add_parent_dirs=true;;
      --user)             add_user_list=true;;
      --no-loop)          loop=false;;
      --no-parent)        add_parent_dirs=false;;
      --no-user)          add_user_list=false;;
      --predefined-all)   add_predefined='all';;
      --predefined-smart) add_predefined='smart';;
      --predefined-none)  add_predefined='none';;
      --stored-all)       add_stored='all';;
      --stored-smart)     add_stored='smart';;
      --stored-none)      add_stored='none';;
      *)                  [[ $1 =~ ^[0-9]+$ ]] && md="$1" || query="$1";;
      esac
      shift
    done # }}}
    if [[ -n $TMUX ]]; then # {{{
      tmux_p="$(tmux show  -vq @tmux_path)"
      eval $(tmux show-environment -gs CD_LAST_DIRS_STORED 2>/dev/null)
    fi # }}}
    # Filter stored dirs # {{{
    if [[ $add_stored != 'none' ]]; then
      cd_list="$(__cd_util --find-in-cache I 5)"
      if [[ -z $cd_list ]]; then # {{{
        for i in $(IFS=':'; echo $CD_LAST_DIRS_STORED); do
          k="${i%%@*}" v="${i#*@}"
          [[ -z $k || -z $v ]] && continue
          echo " $CD_LAST_DIRS_INTERACTIVE_IGNORE " | command grep -q " $k " && continue
          v="$(__cd_util --cd-param "$k" "$v")"
          [[ ! -d "$(__cd_util --tilde-conv "$v")" ]] && continue
          cd_list+="$(printf ":%-6s --> %s" "$k" "${v/$HOME/~}")\n"
        done
        cd_list="$(echo -e "$cd_list" | LC_COLLATE=C sort -f -k3,3 | sed -e '/^$/d')"
        __cd_util --add-to-cache I "$cd_list"
      fi # }}}
      if [[ "$add_stored" == "smart" ]]; then # {{{
        [[ -z $root ]] && root="$tmux_p"
        [[ -z $root ]] && root="$PWD"
        root="$(__cd_util --tilde-conv "$root")"
        tmp=
        if [[ ! -z $root ]]; then
          while read k i v; do
            [[ "$(__cd_util --tilde-conv "$v")" == ${root}* ]] && tmp+="$(printf ":%-6s --> %s" "${k:1}" "${v/$HOME/~}")\n"
          done < <(echo -e "$cd_list")
        fi
        cd_list="$tmp"
      fi # }}}
    fi
    # }}}
    # Fixed list # {{{
    fixed_list="HOME@$HOME"
    tmp=
    for i in $(IFS=':'; echo $fixed_list); do
      k="${i%%@*}" v="${i#*@}"
      [[ -z $k || -z $v ]] && continue
      [[ ! -d "$(__cd_util --tilde-conv "$v")" ]] && continue
      tmp+="$(printf "@%-6s --> %s" "$k" "${v/$HOME/~}")\n"
    done
    fixed_list="$(echo -e "$tmp" | LC_COLLATE=C sort -f -k3,3 | sed -e '/^$/d')"
    # }}}
    if [[ $add_predefined != 'none' ]]; then # {{{
      predefined_list="ROOT@/"
      [[ ! -z $tmux_p ]] && predefined_list+=":TMUX@$tmux_p"
      [[ ! -z $CD_INTERACTIVE_PREDEFINED_LIST ]] && predefined_list+=":$CD_INTERACTIVE_PREDEFINED_LIST"
      tmp=
      for i in $(IFS=':'; echo $predefined_list); do
        k="${i%%@*}" v="${i#*@}"
        [[ -z $k || -z $v ]] && continue
        [[ ! -d "$(__cd_util --tilde-conv "$v")" ]] && continue
        [[ $add_predefined != 'smart' || "$(__cd_util --tilde-conv "$v")" == ${root}* ]] || continue
        tmp+="$(printf "@%-6s --> %s" "$k" "${v/$HOME/~}")\n"
      done
      predefined_list="$(echo -e "$tmp" | LC_COLLATE=C sort -f -k3,3 | sed -e '/^$/d')"
    fi # }}}
    if $add_user_list; then # {{{
      user_list=
      for i in $(IFS=':'; echo $CD_INTERACTIVE_USER_LIST); do
        k="${i%%@*}" v="${i#*@}"
        [[ -z $v ]] && continue
        [[ ! -d "$(__cd_util --tilde-conv "$v")" ]] && continue
        [[ -z $k || $k == $v ]] && k="${v##*/}" && k="${k:0:6}"
        user_list+="$(printf "+%-6s --> %s" "$k" "${v/$HOME/~}")\n"
      done
      user_list="$(echo -e "$user_list" | LC_COLLATE=C sort -f -k3,3 | sed -e '/^$/d')"
    fi # }}}
    fzf_wrapper() { # {{{
      local mode="$1" wd="$3" dir=
      [[ $2 == '---' || -z $2 ]] && dir="$wd"
      [[ -z $dir ]] && dir="$(echo -e "$2" | awk '/ --> / {$1=$2=""; print $0; next}; {print $0}')"
      dir="$(echo $(__cd_util --tilde-conv "$dir"))"
      [[ $dir != /* ]] && dir="$wd/$dir" && dir="$(command cd "$dir"; pwd)"
      case $mode in
      prev)    fzf-exe -c prev --prev 10 -f "$dir" ;;
      split-v) [[ -n $TMUX ]] && tmux split-window -v -p 30 -d -c "$dir";;
      split-h) [[ -n $TMUX ]] && tmux split-window -h -p 50 -d -c "$dir";;
      new-wnd) [[ -n $TMUX ]] && tmux new-window   -a       -d -c "$dir";;
      esac
    } # }}}
    export -f fzf_wrapper __cd_util
    local empty=false hidden=false fzf_key_show_hidden='ctrl-f' fzf_key_upper="ctrl-u" fzf_key_home="ctrl-h" fzf_key_into="ctrl-e" fzf_key_orig="ctrl-o"
    local orgDst="$(command cd "$(__cd_util --tilde-conv "$dst")"; pwd)"
    while true; do # {{{
      dst="$(command cd "$(__cd_util --tilde-conv "$dst")"; pwd)"
      # List # {{{
      list=
      empty=false
      $loop && ! $first && list="---\n"
      if [[ $md -gt 0 ]]; then # {{{
        empty=true
        for i in $(seq 1 $md); do
          res="$( \
            command cd $dst; \
            find . -mindepth $i -maxdepth $i \
                   -type d -a -not \( -name .git -o -path \*/.git/\* \) -print \
                   -o -prune 2>/dev/null \
              | { if ! $hidden; then command grep -v "/\."; else command cat -; fi; } \
              | sed 's|^\./||' | LC_COLLATE=C sort -f)"
          [[ ! -z $res ]] && list+="$res\n" && empty=false
        done
      fi # }}}
      $loop && ! $first && $empty && break
      if $add_parent_dirs && [[ "$dst" != '/' ]]; then # {{{
        list+="../\n"
        list+="$( \
          command cd $dst; \
          find .. -maxdepth 1 \
                  -type d -a -not \( -path "../$(basename $PWD)" -o -path ../.git \) -print \
                  -o -prune 2>/dev/null \
            | LC_COLLATE=C sort -f)\n"
        local i=0 pdir= tmp
        while read tmp pdir; do
          i=$((i+1))
          list+="...${i}/ --> $pdir\n"
        done < <(__cd_util --list-parents "$dst")
      fi # }}}
      list+='\n'
      if [[ -z $query ]]; then # {{{
        if $add_user_list && [[ ! -z "$user_list" ]]; then # {{{
          list+="$user_list\n"
        fi # }}}
        list+="$fixed_list\n"
        if [[ ! -z "$predefined_list" ]]; then # {{{
          case $add_predefined in
          all | smart) list+="$predefined_list\n"
          esac
        fi # }}}
        if [[ ! -z "$cd_list" ]]; then # {{{
          case $add_stored in
          all | smart) list+="$cd_list\n" ;;
          esac
        fi # }}}
      fi # }}}
      # }}}
      # Prompt # {{{
      prompt="$(__cd_util --prompt "$dst")"
      stdout="$(echo -e "$list" | sed -e '/^\.\{1,2\}$/d')"
      # }}}
      if $use_fzf; then # {{{
        res=
        if [[ ! -z $query && $query == *,* ]]; then
          n=${query##*,}
          [[ -z $n ]] && n=1
          query="${query%,*}"
          res="$(echo -e "$stdout" | command grep -F "$query" | command grep "$query$" | sed -n ${n}p)"
          [[ ! -z $res ]] && res="\n$res"
        fi
        if [[ -z $res ]]; then
          res="$(\
            echo -e "$stdout" \
            | fzf \
                $fzf_common_params --no-sort \
                --expect $fzf_key_show_hidden \
                --expect $fzf_key_upper \
                --expect $fzf_key_home \
                --expect $fzf_key_into \
                --expect $fzf_key_orig \
                --layout=reverse \
                --preview "fzf_wrapper prev {} \"$dst\"" \
                --bind "ctrl-v:execute(fzf_wrapper split-v {} \"$dst\")" \
                --bind "ctrl-h:execute(fzf_wrapper split-h {} \"$dst\")" \
                --bind "ctrl-n:execute(fzf_wrapper new-wnd {} \"$dst\")" \
                --prompt="$prompt> " \
                $fzf_params \
                --query="$([[ ! -z "$query" && $query != "-" ]] && echo "$query")" \
          )"
        fi
        [[ $? != 0 || -z $res ]] && return 0
        local key="$(echo -e "$res" | sed -n '1p')"
        res="$(echo -e "$res" | sed -n '2p')"
        [[ -z $res ]] && return 0
        [[ ! -z "$query" ]] && query="-"
        if [[ $res =~ ^\.\.\.[0-9]+'/ --> '(.*) ]]; then
          res="${BASH_REMATCH[1]}"
          if [[ $res == .../* ]]; then
            if [[ $dst =~ (.*)/${res#.../}.* ]]; then
              res="${BASH_REMATCH[1]}/${res#.../}"
            else
              echormf 0 "res starts with .../ but cannot obtain full path"
              echorv -M 0 -nl res dst
            fi
          fi
        fi
        res="$(__cd_util --tilde-conv "$res")"
        case $key in # {{{
        $fzf_key_upper) dst="$(command cd "$dst/.." && pwd)"; continue;;
        $fzf_key_home)  dst="$HOME"; continue;;
        $fzf_key_into)  dst="$(command cd $dst/$res && pwd)"; continue;;
        $fzf_key_orig)  dst="$orgDst"; continue;;
        $fzf_key_step_in) ;;
        $fzf_key_show_hidden) $hidden && hidden=false || hidden=true; continue;;
        '') loop=false;;
        esac # }}}
        # }}}
      else # {{{
        echo "$stdout"
        return 0
      fi # }}}
      case $res in # {{{
      ---)  break;;
      @* | +* | :*) dst="$(echo -e "$res" | sed -e 's/.*-->\s*\(.*\)/\1/')";;
      *) # {{{
        if [[ $res == /* && -e $res ]]; then
          dst="$res"
        else
          dst+="/$res"
        fi
        [[ $dst == //* ]] && dst="${dst:1}"
        [[ ! -d "$dst" ]] && return 1
        ;; # }}}
      esac # }}}
      ! $loop && break
      first=false
    done # }}}
    dst="$(__cd_util --tilde-conv "$dst")"
    [[ -z $dst || ! -d $dst ]] && return 1
  ;; # }}}
  esac
  echo "$dst"
} # }}}
function cd_wrapper { # @@ # {{{
  if [[ $1 != '--' && $1 != '-f' ]]; then # {{{
    set +f
    if [[ ${#BASH_SOURCE[*]} -gt 1 ]]; then
      command cd "$@"
      return $?
    fi
  else
    [[ $1 == '--' ]] && shift
    if [[ $1 != '@@' && $1 != '-f' && "${#BASH_SOURCE[*]}" != 2 ]]; then
      false && echo "Fall-back [${#BASH_SOURCE[*]}], [$@]" >/dev/stderr
      set +f; command cd "$@"; return $?;
    fi
    [[ $1 == '-f' ]] && shift
  fi # }}}
  set +f
  local dst="$1" oldPWD="$PWD" i= cmd="cd" p= verbose=false oldIFS=$IFS cd_list= len= out= stdout= create_dir=false param= in_pipe=false step_in=false err=0
  if [[ $1 == '@@' ]]; then # {{{
    [[ -n $TMUX ]] && { eval $(tmux show-environment -gs CD_LAST_DIRS_STORED 2>/dev/null) || true; }
    cd_list=$CD_LAST_DIRS_STORED
    [[ ! -z $cd_list ]] && IFS=':' && read -ra cd_list <<< "$cd_list" && IFS=$oldIFS
    # echo -e "\na=[$@]\n" >/dev/stderr
    if [[ $3 == '-i' || $4 == '-i' ]]; then # {{{
      echo "2 3 4 5 10 --fzf-params"
      ${CD_INTERACTIVE_LOOP:-true}         && echo "--no-loop"       || echo "--loop"
      ${CD_INTERACTIVE_USER:-true}         && echo "--no-user"       || echo "--user"
      ${CD_INTERACTIVE_PARENT:-true}       && echo "--no-parent"     || echo "--parent"
      case ${CD_INTERACTIVE_PREDEFINED:-all} in
      all)   echo "--predefined-smart --predefined-none";;
      smart) echo "--predefined-all   --predefined-none";;
      none)  echo "--predefined-all   --predefined-smart";;
      esac
      case ${CD_INTERACTIVE_STORED:-all} in
      all)   echo "--stored-smart --stored-none";;
      smart) echo "--stored-all   --stored-none";;
      none)  echo "--stored-all   --stored-smart";;
      esac
      return 0 # }}}
    elif [[ $4 == ':' && $2 -ge 3 ]]; then # {{{
      for i in ${!cd_list[*]}; do
        [[ "${cd_list[$i]/@*}" == $5 ]] && echo "$(command cd "${cd_list[$i]#*@}/$6" && command find . -maxdepth 2 -type d 2>/dev/null| sed -e 's|^\./||' -e '/^\.$/d')" && return 0
      done
      for i in $BASH_PROFILES_FULL; do
        [[ -e $i/aliases ]] && $i/aliases __util_cd_param @@
      done
      return 0
      # }}}
    elif [[ $4 == ','* && $2 -ge 2 ]]; then # {{{
      i="${4:1}"
      [[ -z $i ]] && i="0"
      len=${#CD_LAST_DIRS[*]}
      [[ -z $CD_LAST_DIRS || $len == 1 || $i -ge $len ]] && return
      dst="${CD_LAST_DIRS[$((len-i-1))]}"
      echo "$(command cd "$dst" && command find . -maxdepth 2 -type d | sed -e 's|^\./||' -e '/^\.$/d')"
      return 0
      # }}}
    elif [[ $4 == '.'* && $2 -ge 2 ]]; then # {{{
      i="${4:1}"
      [[ -z $i ]] && i="1"
      dst="$(eval printf "../%.0s" {1..$i})"
      echo "$(command cd "$dst" && command find . -maxdepth 2 -type d | sed -e 's|^\./||' -e '/^\.$/d')"
      return 0
    fi # }}}
    local ret=''
    for i in ${!cd_list[*]}; do
      ret+=" :${cd_list[$i]/@*}"
    done
      for i in $BASH_PROFILES_FULL; do
        [[ -e $i/aliases ]] && $i/aliases __util_cd_param @@ | tr ' ' '\n' | sed 's/^/:/'
      done
    ret+=" @@-d -mk -P -pu -po -i --no-pipe"
    echo "$ret"
    return 0
  fi # }}}
  [[ ! -t 1 ]] && in_pipe=true
  local colors= COff=
  if [[ ! -e "$dst" || $1 == '.' || $1 == '--' ]]; then # {{{
    dst=
    [[ $1 == '--' ]] && shift
    local use_fzf="$(echo ",$FZF_USAGE," | command grep -o ',\s*CD-WRAPPER:[^,]\+,' | command grep -o 'true\|false')"
    [[ -z $use_fzf ]] && use_fzf=$FZF_INSTALLED
    local fzf_key_step_in='ctrl-d'
    local fzf_common_params="--exit-0 --select-1 --expect $fzf_key_step_in --sort --no-multi"
    [[ -z $1 ]] && set -- -i ${CD_INTERACTIVE_CONF:-${CD_INTERACTIVE_DEPTH2:-3} --loop --parent --user --predefined-smart --stored-none}
    # Switches first # {{{
    while [[ ! -z $1 ]]; do
      case $1 in
      --old-pwd) oldPWD="$2"; shift;;
      --)  dst="$2"; shift $#; break;;
      -mk) create_dir=true;;
      -pu) cmd="pushd";;
      -po) cmd="popd";;
      -v)  verbose=true; in_pipe=true; use_fzf=false;;
      --no-pipe) in_pipe=false;;
      -P)  dst="$(readlink -f "${2:-$PWD}")"; shift $#; break;;
      -i | -[0-9]* | -) break;;
      -*)  [[ ! -d "$1" ]] && cmd+=" $1" || { dst="$1"; shift $#; break; };;
      *)   break;;
      esac; shift
    done # }}}
    if ! $in_pipe; then # {{{
      colors=("[48;5;12m" "${COnBlack}")
      COff='[0m'
    fi # }}}
    while [[ ! -z $1 ]]; do # {{{
      case $1 in
      . | .[0-9]*) # Parents # {{{
        dst="$(__cd_util_mode_parent "$@")"
        break;; # }}}
      , | ,[0-9]*) # Previous # {{{
        dst="$(__cd_util_mode_previous "$@")"
        break;; # }}}
      :*) # Stored # {{{
        dst="$(__cd_util_mode_stored "$@")"
        break;; # }}}
      '?'*) # Children (search) # {{{
        dst="$(__cd_util_mode_children "$@")"
        break;; # }}}
      -i | -[0-9]*) # Interactive # {{{
        if [[ -z "$dst" && "$@" =~ "--query="\ *.+$ ]]; then
          local dstConv=$(__cd_util --tilde-conv "${@: -1}")
          [[ -d "$dstConv" || ( -h "$dstConv" && -d "$(readlink -f "$dstConv")" ) ]] && dst="$dstConv"
        fi
        [[ -z "$dst" ]] && dst="$(__cd_util_mode_interactive "$@")"
        break;; # }}}
      *) # {{{
        dst="$1"
        break;; # }}}
      esac; shift
    done # }}}
    if ! $in_pipe && [[ "$(echo -e "$dst" | wc -l)" -gt 1 ]]; then # {{{
      step_in=false
      local key="$(echo -e "$dst" | sed -n '1p')"
      dst="$(echo -e "$dst" | sed -n '2p')"
      case $key in
      $fzf_key_step_in) step_in=true;;
      esac
    fi # }}}
    if [[ $dst == env:* ]]; then # {{{
      local env="${dst%;*}"
      dst="${dst##*;}"
      eval "${env#env:}"
    fi # }}}
    [[ -z $dst ]] && return 0
  fi # }}}
  dst="$(__cd_util --tilde-conv "$dst")"
  if $in_pipe; then
    command cd "$dst"
    return 0
  fi
  cmd="$cmd ${dst// /\\ }"
  [[ "$dst" == '-' && -z $OLDPWD ]] && echo "OLDPWD not set" >/dev/stderr && return 1
  if $verbose && [[ $cmd == cd* ]]; then # {{{
    if [[ ! -e "$dst" && "$dst" != '-' && ! -z "$dst" ]]; then
      $create_dir && command mkdir -p $dst || return 1
    fi
    (eval command $cmd >/dev/null 2>&1; pwd)
    return 0
  fi # }}}
  [[ $cmd == pushd* || $cmd == popd* ]] && cmd="$cmd >/dev/null"
  # Update the list of last dirs # {{{
  if ! $step_in && [[ $cmd == cd* || $cmd == pusd* ]] && [[ "$dst" != "$oldPWD" ]]; then
    [[ ! -e "$dst" && "$dst" != '-' && ! -z "$dst" ]] && $create_dir && command mkdir -p "$dst"
    if [[ -e "$dst" || "$dst" == '-' || -z "$dst" ]]; then # {{{
      local dst_path="$([[ "$dst" == '-' ]] && dst=$oldPWD; command cd "$dst" 2>/dev/null; pwd)"
      local max_to_store=8
      [[ -z $CD_LAST_DIRS ]] && CD_LAST_DIRS=()
      len=${#CD_LAST_DIRS[*]}
      if [[ $len -gt 0 ]]; then
        for i in $(seq $(($len-1)) -1 0); do
          if [[ ${CD_LAST_DIRS[$i]} == "$dst_path" ]]; then
            for i in $(seq $(($i+1)) $(($len-1))); do
              CD_LAST_DIRS[$(($i-1))]=${CD_LAST_DIRS[$i]}
            done
            unset CD_LAST_DIRS[$i]
            break
          fi
        done
      fi
      i=${#CD_LAST_DIRS[*]}
      if [[ $i == $max_to_store ]]; then
        for i in $(seq 1 $(($max_to_store-1)) ); do
          CD_LAST_DIRS[$(($i-1))]=${CD_LAST_DIRS[$i]}
        done
        i=$(($max_to_store-1))
      fi
      CD_LAST_DIRS[$i]="$dst_path"
      export CD_LAST_DIRS
    fi # }}}
  fi # }}}
  eval command $cmd
  err=$?
  if [[ $err == 0 ]]; then
    if $step_in; then
      cd_wrapper -- -f -- --old-pwd "$oldPWD" -i 3 --no-first
      err=$?
    fi
    OLDPWD="$oldPWD"
  fi
  return $err
} # }}}
cd_no_expansion() { # @@ { # {{{
  if [[ $1 == '@@' ]]; then
    cd_wrapper -- "$@"
    return 0
  fi
  cd_wrapper -- "$@"
} # }}}
__cdd_completion() { # {{{
  local fdfindCmd="fdfind"
  which $fdfindCmd >/dev/null 2>&1 || fdfindCmd="fd"
  which $fdfindCmd >/dev/null 2>&1 || fdfindCmd=
  [[ -z $fdfindCmd ]] && COMPREPLY=() && return 0
  local cur= opts= depth=${FZF_MAX_DEPTH:-10}
  [[ $PWD == $HOME || $PWD == $HOME/* ]] || depth=5
  cur=${COMP_WORDS[COMP_CWORD]}
  _get_comp_words_by_ref -n : cur
  opts="$($fdfindCmd -d $depth --type d --type l -L --no-ignore-vcs | sed '/\/$/s|/$||' | sed 's|.*/||' | sort -u)"
  COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
  __ltrim_colon_completions "$cur"
} # }}}
complete -r cdd >/dev/null 2>&1
complete $COMPLETE_DEFAULT_PARAMS -F __cdd_completion cdd

alias cd='set -f;cd_no_expansion' # @@
alias cdd='cd -- -i 8 --loop --stored-none --fzf-params "-e -x --query="'
alias c='cd -- -i 5 --loop --stored-none --fzf-params "-e -x --query="'
alias cD='cd -- -i 8 --loop --stored-all --fzf-params "-e -x --query="'
alias cdp='cd -- -P'
alias po='cd -- -po'
alias pu='cd -- -pu'
alias .1='cd -- .1'
alias .2='cd -- .2'
alias .3='cd -- .3'
alias .4='cd -- .4'
alias .5='cd -- .5'
alias  recd='command cd && command cd - >/dev/null 2>&1'
export HISTIGNORE+=":recd"
