#!/usr/bin/env bash
# vim: fdl=0

[[ -e $HOME/.runtime/check-shell ]] && source $HOME/.runtime/check-shell
export BASHRC_FULL_START=false
[[ ! -z $PS1 && $UID != 0 && ! -n $TMUX ]] && BASHRC_FULL_START=true
$BASHRC_FULL_START && [[ "$TERM_PROGRAM" == "vscode" ]] && BASHRC_FULL_START=false
export BASHRC_SHELL_START=true
[[ -z $PS1 || $UID == 0 || "$TERM_PROGRAM" == "vscode" ]] && BASHRC_SHELL_START=false
# Check arguments and do really basics # {{{
__bashrc_exit() { # {{{
  ${BASHRC_PROFILER:-false} && time-measure -v bashrc_exit
  local addInstalling=true addReturn=true retVal=0 keep=false
  local v="unset -f __bashrc_exit;"
  v+=" unset i profi what_to_do RCSTUFF_FORCE RCSTUFF_IN_BASHRC RCSTUFF_ORIG_TERM TIME_MEASURE_PREFIX"
  local vars="${!BASHRC_*}"
  vars="${vars/BASHRC_RUNTIME_PATH}"
  vars="${vars/BASHRC_PLAIN_INSTALL}"
  v+=" $vars"
  v+=" COMPLETION_GENERIC_UTILS COMPLETION_GENERIC_FUNCTIONS"
  type echorm >/dev/null 2>&1 && v+=" $(echorm -F?)"
  while [[ ! -z $1 ]]; do
    case $1 in
    -)       addInstalling=false;;
    --nr)    addReturn=false;;
    -[0-9])  addReturn=true; retVal="${1#-}";;
    --keep) # {{{
      keep=true
      v="${v/__bashrc_exit}"
      v="${v/BASHRC_PROFILER}";; # }}}
    *)       v+=" $1";;
    esac; shift
  done
  [[ ! -z $PS1 ]] && set +f
  ! $keep && ${BASHRC_PROFILER:-false} && v+=" $(echo ${!BASHRC_PROFILER_*})"
  $addInstalling && v+=" RCSTUFF_BASHRC_INSTALLING"
  v+=";"
  $addReturn && v+=" return $retVal;"
  ${BASHRC_PROFILER:-false} && time-measure -v bashrc_exit --msg 'exit' >/dev/stderr
  if ${BASHRC_TRACE:-false}; then # {{{
    set +xv
    if [[ ! -z $BASH_XTRACEFD ]]; then
      eval "exec $BASH_XTRACEFD>&-"
      unset BASH_XTRACEFD
    fi
  fi # }}}
  echo "$v"
} # }}}
if [[ -z $BASHRC_PLAIN_INSTALL ]]; then # {{{
  export BASHRC_PLAIN_INSTALL=false
  if ! pgrep tmux >/dev/null 2>&1 || ! tmux ls >/dev/null 2>&1; then
    export BASHRC_PLAIN_INSTALL=true
  fi
fi # }}}
f=$PWD/bashrc.conf
[[ -s $f ]] || f=$HOME/.bashrc.conf
if [[ -s $f ]]; then # {{{
  source $f ""
  if [[ $? == 0 ]] && ${BASHRC_CONF_MSG:-true}; then
    ! ${BASH_CONF_SOURCED:-false} && echo "Using bashrc-conf [$f]" >>/dev/stderr
    export BASH_CONF_SOURCED=true
  fi
fi # }}}
unset f
if $BASHRC_PLAIN_INSTALL; then # {{{
  [[ -e $HOME/.bashrc.nice ]] && eval $(__bashrc_exit)
fi # }}}
# Arguments # {{{
RCSTUFF_ORIG_TERM=$TERM
what_to_do='full'
RCSTUFF_FORCE=${RCSTUFF_FORCE:-false}
BASHRC_DBG=${BASHRC_DBG:-false} BASHRC_DBG_MODULE='-'
BASHRC_PROFILER=${BASHRC_PROFILER:-false}
BASHRC_TRACE=${BASHRC_TRACE:-false}
BASHRC_PARAMS_RUNTIME= BASHRC_PARAMS_COLORS= BASHRC_PARAMS_CFG= BASHRC_PARAMS_ALIASES= BASHRC_PARAMS_COMPLETION=
[[ -z "$PS1" ]] && what_to_do="min" && $BASHRC_DBG && echorm "Not interactive shell"
[[ ! -z $BASHRC_PARAMS ]] && set -- $BASHRC_PARAMS "$@"
while [[ ! -z $1 ]]; do # {{{
  case $1 in
  -v)             echorm -f true; BASHRC_DBG=true;;
  --do-full)      what_to_do='full';;
  --do-basic)     what_to_do='basic';;
  --do-min)       what_to_do='min';;
  --no-rc)        what_to_do='nothing';;
  --force)        RCSTUFF_FORCE=true;;
  --profiler)     BASHRC_PROFILER=true;;
  --trace)        BASHRC_TRACE=true;;
  --attach)       BASHRC_TMUX_ATTACH=true;;
  --from-shcut)   BASHRC_FROM_SHORTCUT=true;;
  --runtime-*)    BASHRC_PARAMS_RUNTIME+=" ${1#--runtime}";;
  --cfg-*)        BASHRC_PARAMS_CFG+=" ${1#--cfg}";;
  --aliases-*)    BASHRC_PARAMS_ALIASES+=" ${1#--aliases}";;
  --completion-*) BASHRC_PARAMS_COMPLETION+=" ${1#--completion}";;
  --colors-*)     BASHRC_PARAMS_COLORS+=" ${1#--colors}";;
  *)              break;;
  esac
  shift
done # }}}
# }}}
if $BASHRC_TRACE; then # {{{
  $BASHRC_PLAIN_INSTALL && [[ -z $BASHRC_TRACE_F ]] && export BASHRC_TRACE_F="$HOME/.tmp/bashrc-$(command date +"%Y%m%d-%H%M%S").log"
  if [[ ! -z $BASHRC_TRACE_F ]]; then
    tmpFD=3
    eval "exec $tmpFD>\"$BASHRC_TRACE_F\""
    export BASH_XTRACEFD=$tmpFD
    unset tmpFD
    echo "Tracing bashrc into '$BASHRC_TRACE_F'" >>/dev/stderr
    set -x
  else
    set -xv
  fi
fi # }}}
if $BASHRC_PROFILER; then # {{{
  source $SCRIPT_PATH/bash/aliases.d/time-tools ""
  export TIME_MEASURE_PREFIX="BASHRC_PROFILER_"
  time-measure -v bashrc_full
fi # }}}
# Essentials # {{{
[[ -z $BASH_ESSENTIALS_PATH ]] && export BASH_ESSENTIALS_PATH="$(dirname "$(readlink -f $HOME/.bashrc)")"
source "$BASH_ESSENTIALS_PATH/runtime.basic" ""
$BASHRC_PROFILER && time-measure -v bashrc_step
export RCSTUFF_IN_BASHRC=true
bashEssentialsAlways="completion.basic colors"
if ${TMUX_POPUP:-false} || ! declare -F echor >/dev/null 2>&1; then
  [[ -e $HOME/.runtime/essentails.bash ]] && source $HOME/.runtime/essentails.bash ""
  [[ -e $BASH_ESSENTIALS_PATH/essentails.bash ]] && source $BASH_ESSENTIALS_PATH/essentails.bash ""
  bashEssentials="aliases.d/prefixVars aliases.d/dbg aliases.d/echor aliases.d/time-tools"
  for profi in $bashEssentialsAlways $bashEssentials; do
    [[ -e $BASH_ESSENTIALS_PATH/$profi ]] || { echo "Missing $profi" >/dev/stderr; continue; }
    source "$BASH_ESSENTIALS_PATH/$profi" ""
  done
  if [[ -e $HOME/.bin/bash/profiles ]]; then
    for profi in $HOME/.bin/bash/profiles/*; do
      [[ -e $profi/essentails.bash ]] && source $profi/essentails.bash ""
    done
  fi
else
  for profi in $bashEssentialsAlways; do
    [[ -e $BASH_ESSENTIALS_PATH/$profi ]] || { echo "Missing $profi" >/dev/stderr; continue; }
    source "$BASH_ESSENTIALS_PATH/$profi" ""
  done
fi
unset i bashEssentials bashEssentialsAlways
$BASHRC_PROFILER && time-measure -v bashrc_step --msg 'essentials'
# }}}
if $RCSTUFF_FORCE; then # {{{
  unset $(echo "${!RCSTUFF_*}" | tr ' ' '\n' | command grep "_INSTALLED$" | xargs)
  unset RCSTUFF_BASHRC_INSTALLING
  rm -f \
    $BASHRC_RUNTIME_PATH/aliases* \
    $BASHRC_RUNTIME_PATH/colors \
    $BASHRC_RUNTIME_PATH/completion-list \
    $BASHRC_RUNTIME_PATH/functions-exported \
    $BASHRC_RUNTIME_PATH/fzf.def* \
    $BASHRC_RUNTIME_PATH/net.status \
    $BASHRC_RUNTIME_PATH/unicode-extra.conf
  what_to_do='full'
fi # }}}
if $BASHRC_DBG; then # {{{
  echorm -M -?
  eval $(echorm -f?var BASHRC_DBG BASHRC_DBG_MODULE)
fi # }}}
$BASHRC_DBG && echorm -m $BASHRC_DBG_MODULE "wtd=[$what_to_do], args=[$@]"
if ${RCSTUFF_BASHRC_INSTALLING:-false}; then # {{{
  $BASHRC_DBG && echorm -m $BASHRC_DBG_MODULE "Already being installed [$0, params=($@), tree=(${BASH_SOURCE[*]})]"
  eval $(__bashrc_exit '-')
fi # }}}
# Really nothing # {{{
if [[ "$what_to_do" == 'nothing' ]]; then
  export PS1='\w $ '
  eval $(__bashrc_exit "PROMPT_COMMAND")
fi # }}}
export RCSTUFF_BASHRC_INSTALLING=true
if [[ ! -z "$PS1" ]] && ! declare -f ___rcstuff_bashrc_markup >/dev/null 2>&1; then # {{{
  $BASHRC_DBG && echorm -m $BASHRC_DBG_MODULE "Unsetting RCSTUFF_*"
  unset $(echo "${!RCSTUFF_*}" | tr ' ' '\n' | command grep "_INSTALLED$" | xargs)
  ___rcstuff_bashrc_markup() { : ; }
fi # }}}
# }}}
# If not running interactively and not forced, don't do anything # {{{
if [[ "$what_to_do" == 'min' ]]; then
  [[ -e $BASH_PATH/runtime ]] && source $BASH_PATH/runtime $BASHRC_PARAMS_RUNTIME
  eval $(__bashrc_exit)
fi # }}}
# Source basics # {{{
$BASHRC_PROFILER && time-measure -v bashrc_step --msg 'start'
[[ -e $BASH_PATH/runtime ]] && source $BASH_PATH/runtime $BASHRC_PARAMS_RUNTIME
if ${IS_IN_MC:-false}; then
  eval $(__bashrc_exit)
else
  unset IS_IN_MC
fi
$BASHRC_PROFILER && time-measure -v bashrc_step --msg 'runtime'
[[ -e $BASH_PATH/cfg ]] && source $BASH_PATH/cfg $BASHRC_PARAMS_CFG
$BASHRC_PROFILER && time-measure -v bashrc_step --msg 'cfg'
[[ -e $ALIASES ]] && source $BASH_PATH/aliases $BASHRC_PARAMS_ALIASES
$BASHRC_PROFILER && time-measure -v bashrc_step --msg 'aliases'
$BASHRC_PROFILER && time-measure -v bashrc_step --msg 'exports'
# ZFZ # {{{
if $FZF_INSTALLED && ! ${RCSTUFF_FZF_INSTALLED:-false}; then
  if [[ $what_to_do == 'full' ]]; then
    set -o vi
    if $FZF_INSTALLED; then
      [[ -e $HOME/.fzf.bash ]] && source $HOME/.fzf.bash ''
      export RCSTUFF_FZF_INSTALLED=true
    fi
  fi
  type _fzf_path_completion >/dev/null 2>&1 || source "$SCRIPT_PATH/bash/inits/fzf/shell/completion.bash" 2>/dev/null
fi # }}}
$BASHRC_PROFILER && time-measure -v bashrc_step --msg 'fzf'
[[ -e $BASH_PATH/runtime-post ]] && source $BASH_PATH/runtime-post $BASHRC_PARAMS_RUNTIME
$BASHRC_PROFILER && time-measure -v bashrc_step --msg 'r-post'
[[ -e $BASH_PATH/completion ]] && source $BASH_PATH/completion --do-$what_to_do $BASHRC_PARAMS_COMPLETION
$BASHRC_PROFILER && time-measure -v bashrc_step --msg 'compl'
[[ "$TERM" == 'cygwin' ]]      && source $BASH_PATH/cygwin ''
# }}}
# clean HISTIGNORE # {{{
histIgnoreClean="$(\
  set -f
  for i in $(echo "$HISTIGNORE" | awk -v RS=':' '{print $1}' | sort -u); do
    [[ $i == '*' ]] && continue
    echo -n ":$i"
    [[ "$HISTIGNORE" == *"$i*"* || " $HISTIGNORE_WILD_WHITELIST " == *" $i "* ]] && continue
    echo -n ":$i *"
  done)"
HISTIGNORE="${histIgnoreClean:1}" ":"
unset histIgnoreClean
# }}}
# Remove duplicates # {{{
export PATH="${PATH//@END@:}"
export PATH="${PATH//:.:/:}"
export PATH="${PATH//::/:}"
export PATH="${PATH%:}"
export PATH="$(remove-dups "$PATH" ":")"
export HISTIGNORE="$(remove-dups "$HISTIGNORE" ":")"
export PHISTORY_IGNORED_COMMANDS="$(remove-dups "$PHISTORY_IGNORED_COMMANDS" ":")"
# }}}
# Only in interactive mode # {{{
$BASHRC_PROFILER && time-measure -v bashrc_step
if [[ "$what_to_do" == 'full' ]]; then # {{{
  if [[ ! -z $TMUX_USE_NICE_PRIO ]]; then # {{{
    command ps -U $USER -o pid,nice,comm,cmd | command grep -e "^[^\s]\+\s\+$TMUX_USE_NICE_PRIO" | command grep -v "tmux: server" | while read i; do
      pid="${i/ *}"
      $BASHRC_DBG && echorm -m $BASHRC_DBG_MODULE "Renicing process $(echo $i | awk '{print $3, "[", $4, "]"}') [pid=$pid]"
      sudo renice -n 0 $pid >/dev/null 2>&1
    done
    unset i
  fi # }}}
  # Do not start extra features if root and BASH_START_EXTRA_FEATURES was not defined explicity # {{{
  if [[ $UID == 0 && ! -n $BASH_START_EXTRA_FEATURES ]]; then
    export BASH_EXTRA_FEATURES='tmux-startup'
    export TMUX_INIT_SESSIONS='ROOT'
    export TMUX_STATUS_RIGHT_EXTRA_SORTED='tmux_info time'
    export TMUX_SESSION_DEFAULT="$TMUX_INIT_SESSIONS"
  fi # }}}
  # Start extra features # {{{
  if ${BASH_START_EXTRA_FEATURES:-true}; then
    [[ -z $BASH_EXTRA_FEATURES ]] && BASH_EXTRA_FEATURES='ssh-agent tmux-startup knowledge-base-dir messages'
    isStartAllowed() { # {{{
      $RCSTUFF_FORCE && return 0
      local prefix='skip' onEnd=0 onFound=1 i=
      if [[ $RCSTUFF_ORIG_TERM == 'linux' ]]; then
        prefix='do' onEnd=1 onFound=0
      fi
      set -- all $@
      for i; do
        [[ -e $HOME/$prefix.$i || -e $TMP_PATH/$prefix.$i || -e $TMP_MEM_PATH/$prefix.$i ]] && echorm -m $BASHRC_DBG_MODULE "File [$prefix.$i] found" && return $onFound
      done
      return $onEnd
    } # }}}
    if [[ ! -n $TMUX ]] && [[ "$TERM_PROGRAM" != "vscode" ]]; then
      # Set up ssh-agent # {{{
      if [[ $BASH_EXTRA_FEATURES == *ssh-agent* ]] && isStartAllowed 'ssh'; then
        if [[ -n "$SSH_CLIENT" ]]; then
          [[ $(who | command grep -v "(:" | sort -k5,5 -u | wc -l) == 0 ]] && unset SSH_CLIENT SSH_TTY
        fi
        if [[ ! -n "$SSH_CLIENT" ]]; then
          source $BIN_PATH/fix_ssh_agent.sh --start
          [[ ! -n $TMUX && ! -z $SSH_KEYS ]] && sshh-add --keys $SSH_KEYS
        else
          source $BIN_PATH/fix_ssh_agent.sh --fix
        fi
      fi # }}}
      # Update repo # {{{
      if $BASHRC_PLAIN_INSTALL && [[ $BASH_EXTRA_FEATURES == *update-repo* ]] && isStartAllowed 'update'; then
        $BIN_PATH/setup_updater.sh && unset isStartAllowed && exec bash
      fi # }}}
      # Messages # {{{
      if [[ $BASH_EXTRA_FEATURES == *messages* && -e "$BASH_PATH/messages.sh" ]]; then
        if [[ ! -n $TMUX ]] && ! pgrep -f messages.sh >/dev/null 2>&1; then
          $BASH_PATH/messages.sh login &
          disown
        fi
        source $BASH_PATH/messages.sh
      fi # }}}
      # Start TMUX # {{{
      if ${BASHRC_START_TMUX:-true}; then
        # Start tmux if not started or not attached # {{{
        if [[ $BASH_EXTRA_FEATURES == *tmux-startup* ]] && isStartAllowed 'tmux'; then
          if ! $BASHRC_PLAIN_INSTALL; then
            ${BASHRC_TMUX_ATTACH:-false} && tmux attach
          elif ! tmux ls 2>/dev/null | command grep -q "attached"; then
            if [[ ! -z $TMUX_SB_WORKER && -x $TMUX_SB_WORKER ]]; then # {{{
              pgrep -f "$(basename "$TMUX_SB_WORKER")" >/dev/null 2>&1 || $TMUX_SB_WORKER --tmux
            fi # }}}
            unset $(echo "${!RCSTUFF_*}" | tr ' ' '\n' | command grep "_INSTALLED$" | xargs) RCSTUFF_BASHRC_INSTALLING RCSTUFF_FUNCTION_EXPORTED isStartAllowed RCSTUFF_ORIG_TERM RCSTUFF_FORCE
            if [[ ${LINES:-0} -lt 35 || ${COLUMNS:-0} -lt 100 ]] && ${BASHRC_TMUX_WAIT_TO_MAXIMIXE:-true} && $BASHRC_FULL_START && ! $IS_DOCKER && [[ -z $SSH_CONNECTION ]]; then
              read -t ${BASHRC_TMUX_WAIT_TO_MAXIMIXE_TIMEOUT:-2} -s -n1 -p  "Sleeping for a while to give time to maxime window" >/dev/stderr </dev/tty
              echo >/dev/stderr
            fi
            $BASHRC_DBG && echorm -m $BASHRC_DBG_MODULE -F $BASHRC_TRACE "Starting tmux..."
            eval $(__bashrc_exit --nr --keep) >/dev/null
            export BASHRC_PLAIN_INSTALL=false
            progress --clean
            $BIN_PATH/tmux-startup.sh --lock --attach
          fi
        fi # }}}
      else
        echorm 0 "Start of tmux disabled via env"
      fi # }}}
    fi
    # Knowledge Base dir # {{{
    if [[ $BASH_EXTRA_FEATURES == *knowledge-base-dir* ]] && [[ "$TERM_PROGRAM" != "vscode" ]]; then
      if ! $J2_USE_J2_WRAPPER && [[ -d $TICKET_TOOL_PATH ]]; then # {{{
        source $TICKET_TOOL_PATH/ticket-helper-j
      fi # }}}
    fi
    unset DEFINE_TICKET_TOOL_HELPER
    # }}}
    unset isStartAllowed
  fi # }}}
  if [[ -n $TMUX ]]; then # {{{
    case "$(tmux display-message -p -t $TMUX_PANE -F '#W')" in
    bash | '' | reattach-to-user-namespace) set-title --set-window --unlock-force;;
    esac
  fi # }}}
  [[ ! -z $BASHRC_RUNTIME_PATH/completion-list ]] && complete | grep -v "_minimal" >$BASHRC_RUNTIME_PATH/completion-list # }}}
elif [[ "$what_to_do" == 'basic' ]]; then # {{{
  if ${RCSTUFF_FUNCTION_EXPORTED:-false} && ! $J2_USE_J2_WRAPPER && [[ -d $TICKET_TOOL_PATH ]]; then # {{{
    source $TICKET_TOOL_PATH/ticket-helper-j
  fi # }}}
fi # }}}
$BASHRC_PROFILER && time-measure -v bashrc_step --msg 'interactive'
# }}}
$BASHRC_PROFILER && time-measure -v bashrc_step --msg 'all' -0
$BASHRC_PROFILER && time-measure -v bashrc_full --msg 'bashrc-full' && time-measure --end
eval $(__bashrc_exit --nr) >/dev/null
true

