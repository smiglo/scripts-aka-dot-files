#!/usr/bin/env bash
# vim: fdl=0

# Essentials # {{{
export TMP_PATH=$HOME/.tmp
export TMP_MEM_PATH=$TMP_PATH/.mem
[[ -h $TMP_MEM_PATH && ! -e $TMP_MEM_PATH ]] && rm $TMP_MEM_PATH
[[ ! -e $TMP_MEM_PATH ]] && command mkdir -p $TMP_MEM_PATH
export MEM_KEEP=$TMP_MEM_PATH/keep
[[ ! -e $MEM_KEEP ]] && command mkdir -p $MEM_KEEP
export RUNTIME_PATH=$HOME/.runtime
export APPS_CFG_PATH=$RUNTIME_PATH/apps
[[ -e $APPS_CFG_PATH ]] || mkdir -p $APPS_CFG_PATH
export BASHRC_RUNTIME_PATH="$RUNTIME_PATH/bashrc"
[[ -h $BASHRC_RUNTIME_PATH && ! -e $BASHRC_RUNTIME_PATH ]] && rm $BASHRC_RUNTIME_PATH
[[ -e $BASHRC_RUNTIME_PATH ]] || command mkdir -p $BASHRC_RUNTIME_PATH
export BIN_PATH="${BIN_PATH:-$HOME/.bin}"
export BASH_PATH="${BASH_PATH:-$BIN_PATH/bash}"
export PROFILES_PATH="$BASH_PATH/profiles"
export ALIASES="$BASH_PATH/aliases"
if [[ -z $MY_PROJ_PATH ]]; then
  export MY_PROJ_PATH=$HOME/projects/my
  [[ ! -e $MY_PROJ_PATH/scripts ]] && MY_PROJ_PATH=$HOME/projects
  if [[ ! -e $MY_PROJ_PATH/script ]]; then
    MY_PROJ_PATH="$(readlink -f $HOME/.bashrc)"
    MY_PROJ_PATH=${MY_PROJ_PATH%%/scripts/*}
  fi
fi
if [[ -z $IS_MAC ]]; then # {{{
  export IS_MAC=false
  [[ $(uname) == 'Darwin' ]] && IS_MAC=true
fi # }}}
if [[ -z $IS_DOCKER ]]; then # {{{
  export IS_DOCKER=false
  [[ -e /.dockerenv ]] && IS_DOCKER=true && export DOCKER_HOST="/host"
fi # }}}
export IS_VSCODE=false
[[ $TERM_PROGRAM == "vscode" ]] && export IS_VSCODE=true
if $IS_VSCODE ]]; then
  [[ -e $APPS_CFG_PATH/vscode ]] || mkdir -p $APPS_CFG_PATH/vscode
fi # }}}
# Clear appended variables, init env # {{{
export ALIASES_MAP=
export BASH_EXTRA_FEATURES=
export BASH_UPDATE_REPOS=
export BASH_UPDATE_TIME=
export BASH_ALIASES_DUMMY="compl-add"
export COMPLETION_GENERIC_UTILS=
export COMPLETION_GENERIC_FUNCTIONS=
export COLUMNS=$COLUMNS
export CD_INTERACTIVE_PREDEFINED_LIST=
export CD_INTERACTIVE_USER_LIST=
export CD_LAST_DIRS_INTERACTIVE_IGNORE=
export CD_LAST_DIRS_STORED=
export CLANG_PARAMS_COMMON="-g -O0"
export CLANG_PARAMS_W="-Wall -Wno-disabled-macro-expansion -Wno-writable-strings"
export CLANG_PARAMS="-std=c99"
export CLANGPP_PARAMS="-std=c++11"
export CLIP_FILE="$MEM_KEEP/clip"
export GIT_LOG_ALL_PARAMS=
export GIT_LOG_PARAMS=
export GIT_PRE_COMMIT_DEBUGS=
export GREP_EXCLUDES=
export HISTIGNORE=
export HISTIGNORE+=":reset:clear:exit"
export HISTIGNORE+=":keep-pass.sh:./keep-pass.sh"
export HISTIGNORE+=":vim-enc.sh"
export HISTIGNORE+=":reboot:shutdown"
export HISTIGNORE_WILD_WHITELIST=
export HISTIGNORE_WILD_WHITELIST+=" echo"
export HL_DEFAULTS=
export IFACE_IGNORED=
export INFO_FILE="$TMP_MEM_PATH/info.txt"
export INSTALL_FEATURES=
export J2_SECTION_DEFAULT="setup"
export J2_TICKET_FILE=".ticket.sh .ticket"
[[ -z $J2_USE_J2_WRAPPER ]] && export J2_USE_J2_WRAPPER=true
export KB_PATHS=
export KEEP_PASS_JOURNALS=
export MANPATH=
export PHISTORY_IGNORED_COMMANDS=
export PHISTORY_IGNORED_COMMANDS+="exec"
export PHISTORY_IGNORED_COMMANDS+=":ls:ll:cd:ps:jobs"
export PHISTORY_IGNORED_COMMANDS+=":@vi@:@vim@:@gvi@:@gvim@:vim-session"
export PHISTORY_IGNORED_COMMANDS+=":$BIN_PATH:$BASH_PATH:./bash/aliases\ *"
export PHISTORY_IGNORED_COMMANDS+=":sendMsg"
export PHISTORY_IGNORED_COMMANDS+=":echo:printf:echor:echorc:echorv:echorm"
export PHISTORY_IGNORED_COMMANDS+=":cl:clf:printfc:echoc"
export PHISTORY_IGNORED_COMMANDS+=":dbg:dbgF:FAT:ERR:WRN:INF:DBG:TRC"
export PHISTORY_IGNORED_COMMANDS+=":time-measure"
export PHISTORY_IGNORED_COMMANDS+=":type"
export PS1_ENV_PWD=
export ROWS=$ROWS
export SCRIPT_PATH=
export SHARABLE_PATH=
export SHARED_BASH_PATH=
export SSH_KEYS=
export TICKET_J_PREDEFINED=
export TICKET_TOOL_POST_ENV=
export TMP_PATHS_CLEAN=
export TMUX_FINGERS_PREDEFINED=
export TMUX_FINGERS_PREDEFINED+=" ([[:digit:]]{5,})"                                                                                  # Number
export TMUX_FINGERS_PREDEFINED+=" 0x([0-9a-f]+)"                                                                                      # Hex
export TMUX_FINGERS_PREDEFINED+=" ([0-9a-f]{7,40})"                                                                                   # SHA
export TMUX_FINGERS_PREDEFINED+=" ((^|^\.|[[:space:]]|[[:space:]]\.|[[:space:]]\.\.|^\.\.)[[:alnum:]~_-]*/[][[:alnum:]_.#$%&+=/@-]+)" # Path
export TMUX_FINGERS_PREDEFINED+=" ((https?://|git@|git://|ssh://|ftp://|file:///)[[:alnum:]?=%/_.:,;~@!#$&()*+-]*)"                   # URL
export TMUX_FINGERS_REGEX=
export TMUX_INIT_SESSIONS=
export TMUX_INIT_SESSIONS_SKIP=
export TMUX_REMOTE_PREFIXES=
export TMUX_SMART_BLACKLIST_DOCKER="EMPTY_VALUE"
export TMUX_SMART_BLACKLIST_SSH="EMPTY_VALUE"
export TMUX_STATUS_LEFT_EXTRA_MAP=
export TMUX_STATUS_RIGHT_EXTRA=
export TMUX_SWITCH_CLIENT_MAP=
[[ -z $TMUX_POPUP ]] && export TMUX_POPUP=false
export TOOLS_PATH="$HOME/tools"
export TO_INSTALL_BIN_MISC='BASIC'
export TO_INSTALL_TOOLS=
export TO_INSTALL_TOOLS_EXTRA=
export VIM_CTRLP_IGNORE_DIRS="NOT_EXISTING_DIR_PATTERN_TO_IGNORE"
export VIM_PRJ_EXCLUDE=
export VIM_PRJ_PARAMS=
# }}}
# MY_PROJ_PATH setup # {{{
export SCRIPT_PATH=$MY_PROJ_PATH/scripts
export ALIASES_SCRIPTS="$SCRIPT_PATH/bin/from-aliases"
export BASH_UPDATE_REPOS="$MY_PROJ_PATH/scripts $MY_PROJ_PATH/vim"
export BASH_UPDATE_TIME="$((1*18*60*60))"
export GIT_REPOS="$BASH_UPDATE_REPOS $MY_PROJ_PATH/info"
[[ -e $RUNTIME_PATH/.git ]] && GIT_REPOS+=" $RUNTIME_PATH"
export CD_LAST_DIRS_STORED+=":s@$SCRIPT_PATH"
[[ -e $MY_PROJ_PATH/vim  ]] && export CD_LAST_DIRS_STORED+=":vim@$MY_PROJ_PATH/vim"
[[ -e $MY_PROJ_PATH/info ]] && export CD_LAST_DIRS_STORED+=":info@$MY_PROJ_PATH/info"
[[ -e $MY_PROJ_PATH/.ticket-data.sh ]] && KB_PATHS+=" env:$MY_PROJ_PATH"
[[ -e $MY_PROJ_PATH/sp/.ticket-data.sh ]] && KB_PATHS+=" sp:$MY_PROJ_PATH/sp"
if [[ -e $MY_PROJ_PATH/oth/.ticket-data.sh ]]; then # {{{
  if [[ $MY_PROJ_PATH == */my && -e "$HOME/projects/oth" ]]; then
    KB_PATHS+=" oth-my:$MY_PROJ_PATH/oth"
    KB_PATHS+=" oth:$HOME/projects/oth"
  else
    KB_PATHS+=" oth:$MY_PROJ_PATH/oth"
  fi
elif [[ -e "$HOME/projects/oth" ]]; then
  KB_PATHS+=" oth:$HOME/projects/oth"
fi # }}}
if [[ -e $MY_PROJ_PATH/tmp/.ticket-data.sh ]]; then # {{{
  if [[ $MY_PROJ_PATH == */my && -e "$HOME/projects/tmp" ]]; then
    KB_PATHS+=" tmp-my:$MY_PROJ_PATH/tmp"
    KB_PATHS+=" tmp:$HOME/projects/tmp"
  else
    KB_PATHS+=" tmp:$MY_PROJ_PATH/tmp"
  fi
elif [[ -e "$HOME/projects/tmp" ]]; then
  KB_PATHS+=" tmp:$MY_PROJ_PATH/tmp"
fi # }}}
# }}}
# Profiles # {{{
export BASH_PROFILES="$(command cd $PROFILES_PATH 2>/dev/null; echo *)"
[[ $BASH_PROFILES == '*' ]] && export BASH_PROFILES=""
export BASH_PROFILES_FULL="$(command ls -d $PROFILES_PATH/* 2>/dev/null)"
# }}}
# Runtime Path - Setup # {{{
[[ ! -e $RUNTIME_PATH ]] && command mkdir $RUNTIME_PATH
for profi in $BASH_PROFILES; do
  [[ -e $RUNTIME_PATH/runtime-pre.bash.$profi ]] && source $RUNTIME_PATH/runtime-pre.bash.$profi
done
[[ -e $RUNTIME_PATH/runtime-pre.bash ]] && source $RUNTIME_PATH/runtime-pre.bash
[[ -e $RUNTIME_PATH/runtime-pre.mount ]] && source $RUNTIME_PATH/runtime-pre.mount
[[ -e $RUNTIME_PATH/tmux-buffers ]] || command mkdir $RUNTIME_PATH/tmux-buffers
export CD_LAST_DIRS_STORED+=":rt@$RUNTIME_PATH"
[[ -e $APPS_CFG_PATH ]] || command mkdir $APPS_CFG_PATH
# }}}
# TMP Paths # {{{
export TMPDIR=$TMP_PATH/.tmp-dir
[[ ! -e $TMPDIR ]] && command mkdir -p $TMPDIR
chmod 700 $TMPDIR $TMP_MEM_PATH
# }}}
# shortcuts to env # {{{
export RT=$RUNTIME_PATH
export TP=$TMP_PATH
export TM=$TMP_MEM_PATH
export MK=$MEM_KEEP
export AP=$APPS_CFG_PATH
export BA=$BASHRC_RUNTIME_PATH
# }}}

