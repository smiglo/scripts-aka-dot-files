#!/usr/bin/env bash
# vim: fdl=0

f="${TICKET_CONF_WAIT_ON_FILE:-/dev/stdin}" phrase=() action=() dbg=0 delay=9999 loop=false showTmuxProgress=false tmuxText="${TICKET_CONF_WAIT_ON_TMUX_TEXT:-Wait[%s]}" silent=false
if [[ $1 == '@@' ]]; then # {{{
  echo "-f --file -l --loop -d --delay -v -vv -s" -p{,=} --progress{,=}
  echo "$TICKET_CONF_WAIT_ON_PHRASES_COMPL"
  exit 0
fi # }}}
while [[ ! -z $1 ]]; do # {{{
  case $1 in
  -f | --file)      f="$2"; shift;;
  -l | --loop)      loop=true;;
  -d | --delay)     delay="$2"; shift;;
  -p=*)             tmuxText="${1#-p=}";;&
  --progress=*)     tmuxText="${1#--progress=}";;&
  -p=* | --progress=* |\
  -p | --progress ) showTmuxProgress=true;;
  -s)    silent=true;;
  -v)    dbg=1;;
  -vv)   dbg=2;;
  *)     break;;
  esac
  shift
done # }}}
[[ $# == 0 ]] && echo "Arguments are missing" >/dev/stderr && exit 1
while [[ ! -z $1 ]]; do # {{{
  case $1 in
  @@*) phrase+=("${1#@}");;
  @*) # {{{
    if [[ $1 == @ ]]; then
      p="$1"
      v="$TICKET_CONF_WAIT_ON_PHRASE_DEF"
    else
      p="${1#@}"
      v="$(echo -e "$TICKET_CONF_WAIT_ON_PHRASES_SHORT" | grep "^$p:")"
      v="${v#*:}"
    fi
    [[ -z $v ]] && echo "No configuration for '$p'" >/dev/stderr && exit 1
    phrase+=("$v") ;; # }}}
  *) phrase+=("$1");;
  esac
  action+=("${2:-"$TICKET_CONF_WAIT_ON_ACTION_DEF"}")
  shift; shift
done # }}}
[[ -z ${#action[*]} ]] && echo "Arguments illformed, should be a set of pairs 'phrase' 'action'" >/dev/stderr && exit 1
[[ ! -e $f ]] && echo "Source file '$f' does not exist" >/dev/stderr && exit 1
phrases="${phrase[*]}" && phrases="${phrases//\\}"
while true; do
  $silent || { eval progress --mark $($showTmuxProgress && echo "--tmux '$tmuxText'") --msg "'Waiting for [$phrases]'" --dots --out /dev/stderr; pid=$PPID; }
  trap '$silent || { progress --unmark $pid; echo; }; exit;' INT TERM EXIT
  ( sleep $delay ) &
  tailPid=$!
  tail -F "$f" -s 1 -n1 --pid $tailPid | while read l; do
    for ii in ${!phrase[*]}; do
      if echo "$l" | grep -q "${phrase[ii]}"; then # {{{
        $silent || progress --unmark $pid
        [[ $dbg -gt 0 ]] && echo "WaitOn: Matched [${phrase[ii]}]:[${action[ii]}]$([[ $dbg -gt 1 ]] && echo " [$l]")" >/dev/stderr
        a="${action[ii]}"
        case $a in # {{{
        @*)   eval ${a#@};;
        TT:*) eval $cmd_TT ${a#TT:};;
        *)    eval $cmd_tt $a;;
        esac # }}}
        kill -s PIPE $tailPid >/dev/null 2>&1
        break 2
      fi # }}}
    done
    if read -n1 -t0.0001 key </dev/tty; then
      case ${key,,} in
      q) # {{{
        kill -s PIPE $tailPid >/dev/null 2>&1
        break ;; # }}}
      '') # {{{
        if [[ ${#action[*]} == 1 ]]; then
          a="${action[0]}"
          case $a in # {{{
          @*)   eval ${a#@};;
          TT:*) eval $cmd_TT ${a#TT:};;
          *)    eval $cmd_tt $a;;
          esac # }}}
          kill -s PIPE $tailPid >/dev/null 2>&1
          break
        fi ;; # }}}
      esac
    fi
  done
  $silent || progress --unmark $pid
  trap - INT TERM EXIT
  ! $loop && break
done

